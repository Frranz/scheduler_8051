A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 15:15:58 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\scheduler.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE scheduler.a51 SET(SMALL) DEBUG PRINT(.\Listings\scheduler.lst) OBJECT(.
                      \Objects\scheduler.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     $nomod51 
                       2     ;#include <Reg517a.inc>
                +1     3     ;-------------------------------------------------------------------------------
                +1     4     ; Copyright 1995-1996 KEIL Software, Inc.
                +1     5     ; 80517A Processor Declarations
                +1     6     ;-------------------------------------------------------------------------------
                +1     7  +1 $save 
                +1   199  +1 $restore 
                +1   200     
                     201     
                     202     
                     203     NAME scheduler
                     204     PUBLIC scheduler
                     205             
                     206     EXTRN CODE(consoleProcess)      
                     207             
                     208             ;define timer2 interupt routine
----                 209             cseg at 001bh
001B 020000   F      210             jmp tihandler   
                     211             
                     212     schedulerSegment SEGMENT CODE
                     213             ; switch to the created relocatable segment
----                 214             RSEG schedulerSegment
                     215             
0000                 216     scheduler:
                     217             ;define process status values
  0000               218             statusNotRunning equ 0
  0001               219             statusStartReq equ 1
  0002               220             statusRunning equ 2
                     221             
                     222             ;start
0000                 223             org 0000h
                     224                     
0000 900000   F      225             mov dptr,#consoleProcess
0003 85822F          226             mov 0x2f,dpl
0006 858330          227             mov 0x30,dph
                     228             
                     229             ;enable all interrupts
0009 D2AF            230             setb eal
000B 758D00          231             mov th1,#0
000E 758B00          232             mov tl1,#0
                     233             
                     234             ;enable and start timer 1
0011 D2AB            235             setb et1
0013 D28E            236             setb tr1
                     237             
                     238             ;start console process DELETE THIS
0015 120000   F      239             call consoleProcess
0018 020000   F      240             jmp endloop
                     241             
                     242             
001B                 243     tihandler:
                     244             ;do scheduelr stuff here
                     245             
                     246             ;save old adress
                     247             ;put accu & r0 in save space to do some basic calc
001B 8829            248             mov 0x29,r0
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 15:15:58 PAGE     2

001D F52A            249             mov 0x2a,A
                     250             
                     251             ;save next adress of interruped process
                     252             ;find next adress space for the process
001F E52B            253             mov A,0x2b      ;moves process id in a
0021 23              254             rl      A               ;quick multiply A by two, because adress is 2 bits long
0022 242F            255             add A,#2fh      ;add offset to beginning of next adress area
                     256             
                     257     ;       ;move adress from stack to calculated adress                                    don
                             t save return adress, cuz we save whole stack afterwards
0024 F8              258             mov r0,A
                     259             ;first pop high
0025 08              260             inc r0
0026 D0E0            261             pop ACC
0028 F6              262             mov @r0,A
                     263             ;then low
0029 18              264             dec r0
002A D0E0            265             pop ACC
002C F6              266             mov @r0,A
                     267             
                     268             ;save rest of context
002D E52B            269             mov A,0x2b
002F A82B            270             mov r0,0x2b
                     271             
                     272             ;calculate offset in register safe (id * size of one register store[32])
0031 23              273             rl A
0032 23              274             rl A
0033 23              275             rl A
0034 23              276             rl A
                     277             ;adding stack size
0035 B80002          278             cjne r0,#0,is1or2
0038 8007            279             jmp afterCalculatingOffset
003A                 280             is1or2:
003A 2408            281                     add A,#8
003C B80202          282                     cjne r0,#2,afterCalculatingOffset
003F 2408            283                     add A,#8
                     284             
                     285     
                     286     
0041                 287             afterCalculatingOffset: 
                     288             ;add start adress of register safe
0041 2435            289             add A,#35h
0043 F8              290             mov r0,A
                     291             
                     292             ;actually save registers
0044 A629            293             mov @r0,0x29 ;r0 from register save space
0046 08              294             inc r0
0047 A601            295             mov @r0,1
0049 08              296             inc r0
004A A602            297             mov @r0,2
004C 08              298             inc r0
004D A603            299             mov @r0,3
004F 08              300             inc r0
0050 A604            301             mov @r0,4
0052 08              302             inc r0
0053 A605            303             mov @r0,5
0055 08              304             inc r0
0056 A606            305             mov @r0,6
0058 08              306             inc r0
0059 A607            307             mov @r0,7
005B 08              308             inc r0
005C A62A            309             mov @r0,0x2a ;reg A from save space
005E 08              310             inc r0
005F A6F0            311             mov @r0,b
0061 08              312             inc r0
0062 A681            313             mov @r0,SP
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 15:15:58 PAGE     3

0064 08              314             inc r0
0065 A682            315             mov @r0,dpl
0067 08              316             inc r0
0068 A683            317             mov @r0,dph
006A 08              318             inc r0
006B A6D0            319             mov @r0,psw
006D 08              320             inc r0
                     321             ;save stack
006E 7907            322             mov r1,#7
0070 AA81            323             mov r2,SP
0072 0A              324             inc r2
0073                 325             saveStack:      
0073 E7              326                     mov A,@r1
0074 F6              327                     mov @r0,A
0075 09              328                     inc r1
0076 08              329                     inc r0
0077 E9              330                     mov A,r1
0078 6A              331                     xrl A,r2 ;to act like compare equal
0079 70F8            332                     jnz saveStack
                     333             
                     334     
                     335             
007B                 336             findNextProcess:
                     337                     ;find next program to execute
007B E52B            338                     mov A,0x2b
007D 04              339                     inc A
                     340                     
                     341                     ;build modulo 3 (making 0 if its 3)
007E B40301          342                     cjne A,#3,justSkipTheLineBefore
0081 E4              343                     clr A
                     344                     
0082                 345                     justSkipTheLineBefore:
                     346                     ;save new current process
0082 F52B            347                     mov 0x2b,A
                     348                     
                     349                     ;check if started
0084 242C            350                     add A,#2ch
0086 F8              351                     mov r0,A
0087 E6              352                     mov A,@r0
0088 6400            353                     xrl A,#statusNotRunning
008A 60EF            354                     jz findNextProcess
                     355     ;               mov r0,A
                     356     ;               cjne @r0,#statusRunning,findNextProcess
                     357             
                     358             ;load context of next process   
                     359             ;calc context adress
                     360             ;switch register bank to 3
008C 43D018          361             orl psw,#00011000b
                     362     ;       mov A,0x58
                     363     ;       rl  A
                     364     ;       add A,#5ch
                     365     ;       mov r0,A
                     366             
                     367             ;get start adress of saved context
008F E52B            368             mov A,0x2b
0091 F8              369             mov r0,A
0092 23              370             rl A
0093 23              371             rl A
0094 23              372             rl A
0095 23              373             rl A
0096 B80002          374             cjne r0,#0,is1or2v2
0099 8007            375             jmp afterCalculatingOffset2
009B                 376             is1or2v2:
009B 2408            377                     add A,#8
009D B80202          378                     cjne r0,#2,afterCalculatingOffset2
00A0 2408            379                     add A,#8
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 15:15:58 PAGE     4

                     380             
                     381     
                     382     
00A2                 383             afterCalculatingOffset2:        
00A2 2435            384             add A,#35h
00A4 F8              385             mov r0,A
                     386             
                     387             ;restore registers
00A5 8600            388             mov 0,@r0
00A7 08              389             inc r0
00A8 8601            390             mov 1,@r0
00AA 08              391             inc r0
00AB 8602            392             mov 2,@r0
00AD 08              393             inc r0
00AE 8603            394             mov 3,@r0
00B0 08              395             inc r0
00B1 8604            396             mov 4,@r0
00B3 08              397             inc r0
00B4 8605            398             mov 5,@r0
00B6 08              399             inc r0
00B7 8606            400             mov 6,@r0
00B9 08              401             inc r0
00BA 8607            402             mov 7,@r0
00BC 08              403             inc r0
00BD E6              404             mov A,@r0
00BE 08              405             inc r0
00BF 86F0            406             mov b,@r0
00C1 08              407             inc r0
00C2 8681            408             mov sp,@r0
00C4 08              409             inc r0
00C5 8682            410             mov dpl,@r0
00C7 08              411             inc r0
00C8 8683            412             mov dph,@r0
00CA 08              413             inc r0
                     414             
                     415             ;resave A,0
00CB F52A            416             mov 0x2a,A
                     417             
                     418             ;restore psw later to stay in register bank 3
00CD E8              419             mov A,r0
00CE FA              420             mov r2,A   ;r2 now has pointer to value of psw
                     421     ;       mov psw,@r0
00CF 08              422             inc r0
                     423             
00D0 7907            424             mov r1,#7
                     425             
                     426             ;if process is in status start request make sp manually #7
00D2 E52B            427             mov A,0x2b
00D4 B40107          428             cjne A,#statusStartReq,beforeRestoreStack
00D7 758107          429             mov sp,#7       ;set default for sp & change status
00DA 242C            430             add A,#2ch
00DC 7402            431             mov A,#statusRunning
                     432             
                     433             
00DE                 434             beforeRestoreStack:
00DE AC81            435             mov r4,sp
00E0 E9              436             mov A,r1
00E1 6C              437             xrl A,r4 ;in case stack didnt grow
00E2 6008            438             jz restoreStackComplete
00E4                 439             restoreStack:
00E4 E6              440                     mov A,@r0
00E5 F7              441                     mov @r1,A
00E6 09              442                     inc r1
00E7 08              443                     inc r0
00E8 E9              444                     mov A,r1
                     445                     ;check if r1 equals sp
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 15:15:58 PAGE     5

00E9 6C              446                     xrl A,r4
00EA 70F8            447                     jnz restoreStack
                     448             
00EC                 449             restoreStackComplete:
                     450             ;push return adress onto stack                          probably not necessary, bec
                             ause stack is saved anyways
00EC E52B            451             mov A,0x2b
00EE 23              452             rl  A
00EF 242F            453             add A,#2fh
00F1 F8              454             mov r0,A
                     455             
00F2 8627            456             mov 0x27,@r0
00F4 08              457             inc r0
00F5 8628            458             mov 0x28,@r0
00F7 C027            459             push 0x27
00F9 C028            460             push 0x28
                     461             
                     462     ;       mov r0,A
                     463     ;       mov dpl,@r0
                     464     ;       push dpl
                     465     ;       inc r0
                     466     ;       mov dph,@r0
                     467     ;       push dph
                     468             
                     469             ;switch register bank back to 0
00FB EA              470             mov A,r2
00FC F8              471             mov r0,A
00FD 86D0            472             mov psw,@r0
00FF E52A            473             mov A,0x2a
                     474     ;       anl psw,#11100111b
0101 32              475             reti
                     476             
0102 8008            477             jmp realend
                     478             
0104                 479     findNextProg:
                     480     ;       cjne r0,statusRunning,
                     481             
0104 32              482             reti
                     483             
0105                 484     endloop:
0105 00              485             nop
0106 D2AE            486             setb wdt
0108 D2BE            487             setb swdt
010A 80F9            488             jmp endloop
                     489             
010C                 490     realend:        
                     491     
                     492             end
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 15:15:58 PAGE     6

SYMBOL TABLE LISTING
------ ----- -------


N A M E                  T Y P E  V A L U E   ATTRIBUTES

AC. . . . . . . . . . .  B ADDR   00D0H.6 A   
ACC . . . . . . . . . .  D ADDR   00E0H   A   
ADCON0. . . . . . . . .  D ADDR   00D8H   A   
ADCON1. . . . . . . . .  D ADDR   00DCH   A   
ADDATH. . . . . . . . .  D ADDR   00D9H   A   
ADDATL. . . . . . . . .  D ADDR   00DAH   A   
ADEX. . . . . . . . . .  B ADDR   00D8H.5 A   
ADM . . . . . . . . . .  B ADDR   00D8H.3 A   
AFTERCALCULATINGOFFSET.  C ADDR   0041H   R   SEG=SCHEDULERSEGMENT
AFTERCALCULATINGOFFSET2  C ADDR   00A2H   R   SEG=SCHEDULERSEGMENT
ARCON . . . . . . . . .  D ADDR   00EFH   A   
B . . . . . . . . . . .  D ADDR   00F0H   A   
BD. . . . . . . . . . .  B ADDR   00D8H.7 A   
BEFORERESTORESTACK. . .  C ADDR   00DEH   R   SEG=SCHEDULERSEGMENT
BSY . . . . . . . . . .  B ADDR   00D8H.4 A   
CC4EN . . . . . . . . .  D ADDR   00C9H   A   
CCEN. . . . . . . . . .  D ADDR   00C1H   A   
CCH1. . . . . . . . . .  D ADDR   00C3H   A   
CCH2. . . . . . . . . .  D ADDR   00C5H   A   
CCH3. . . . . . . . . .  D ADDR   00C7H   A   
CCH4. . . . . . . . . .  D ADDR   00CFH   A   
CCL1. . . . . . . . . .  D ADDR   00C2H   A   
CCL2. . . . . . . . . .  D ADDR   00C4H   A   
CCL3. . . . . . . . . .  D ADDR   00C6H   A   
CCL4. . . . . . . . . .  D ADDR   00CEH   A   
CLK . . . . . . . . . .  B ADDR   00D8H.6 A   
CLRMSK. . . . . . . . .  D ADDR   00A6H   A   
CMEN. . . . . . . . . .  D ADDR   00F6H   A   
CMH0. . . . . . . . . .  D ADDR   00D3H   A   
CMH1. . . . . . . . . .  D ADDR   00D5H   A   
CMH2. . . . . . . . . .  D ADDR   00D7H   A   
CMH3. . . . . . . . . .  D ADDR   00E3H   A   
CMH4. . . . . . . . . .  D ADDR   00E5H   A   
CMH5. . . . . . . . . .  D ADDR   00E7H   A   
CMH6. . . . . . . . . .  D ADDR   00F3H   A   
CMH7. . . . . . . . . .  D ADDR   00F5H   A   
CML0. . . . . . . . . .  D ADDR   00D2H   A   
CML1. . . . . . . . . .  D ADDR   00D4H   A   
CML2. . . . . . . . . .  D ADDR   00D6H   A   
CML3. . . . . . . . . .  D ADDR   00E2H   A   
CML4. . . . . . . . . .  D ADDR   00E4H   A   
CML5. . . . . . . . . .  D ADDR   00E6H   A   
CML6. . . . . . . . . .  D ADDR   00F2H   A   
CML7. . . . . . . . . .  D ADDR   00F4H   A   
CMSEL . . . . . . . . .  D ADDR   00F7H   A   
COMCLRH . . . . . . . .  D ADDR   00A4H   A   
COMCLRL . . . . . . . .  D ADDR   00A3H   A   
COMSETH . . . . . . . .  D ADDR   00A2H   A   
COMSETL . . . . . . . .  D ADDR   00A1H   A   
CONSOLEPROCESS. . . . .  C ADDR   -----       EXT
CRCH. . . . . . . . . .  D ADDR   00CBH   A   
CRCL. . . . . . . . . .  D ADDR   00CAH   A   
CTCON . . . . . . . . .  D ADDR   00E1H   A   
CTRELH. . . . . . . . .  D ADDR   00DFH   A   
CTRELL. . . . . . . . .  D ADDR   00DEH   A   
CY. . . . . . . . . . .  B ADDR   00D0H.7 A   
DPH . . . . . . . . . .  D ADDR   0083H   A   
DPL . . . . . . . . . .  D ADDR   0082H   A   
DPSEL . . . . . . . . .  D ADDR   0092H   A   
EADC. . . . . . . . . .  B ADDR   00B8H.0 A   
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 15:15:58 PAGE     7

EAL . . . . . . . . . .  B ADDR   00A8H.7 A   
ENDLOOP . . . . . . . .  C ADDR   0105H   R   SEG=SCHEDULERSEGMENT
ES. . . . . . . . . . .  B ADDR   00A8H.4 A   
ET0 . . . . . . . . . .  B ADDR   00A8H.1 A   
ET1 . . . . . . . . . .  B ADDR   00A8H.3 A   
ET2 . . . . . . . . . .  B ADDR   00A8H.5 A   
EX0 . . . . . . . . . .  B ADDR   00A8H.0 A   
EX1 . . . . . . . . . .  B ADDR   00A8H.2 A   
EX2 . . . . . . . . . .  B ADDR   00B8H.1 A   
EX3 . . . . . . . . . .  B ADDR   00B8H.2 A   
EX4 . . . . . . . . . .  B ADDR   00B8H.3 A   
EX5 . . . . . . . . . .  B ADDR   00B8H.4 A   
EX6 . . . . . . . . . .  B ADDR   00B8H.5 A   
EXEN2 . . . . . . . . .  B ADDR   00B8H.7 A   
EXF2. . . . . . . . . .  B ADDR   00C0H.7 A   
F0. . . . . . . . . . .  B ADDR   00D0H.5 A   
F1. . . . . . . . . . .  B ADDR   00D0H.1 A   
FINDNEXTPROCESS . . . .  C ADDR   007BH   R   SEG=SCHEDULERSEGMENT
FINDNEXTPROG. . . . . .  C ADDR   0104H   R   SEG=SCHEDULERSEGMENT
I2FR. . . . . . . . . .  B ADDR   00C8H.5 A   
I3FR. . . . . . . . . .  B ADDR   00C8H.6 A   
IADC. . . . . . . . . .  B ADDR   00C0H.0 A   
IE0 . . . . . . . . . .  B ADDR   0088H.1 A   
IE1 . . . . . . . . . .  B ADDR   0088H.3 A   
IEN0. . . . . . . . . .  D ADDR   00A8H   A   
IEN1. . . . . . . . . .  D ADDR   00B8H   A   
IEN2. . . . . . . . . .  D ADDR   009AH   A   
IEX2. . . . . . . . . .  B ADDR   00C0H.1 A   
IEX3. . . . . . . . . .  B ADDR   00C0H.2 A   
IEX4. . . . . . . . . .  B ADDR   00C0H.3 A   
IEX5. . . . . . . . . .  B ADDR   00C0H.4 A   
IEX6. . . . . . . . . .  B ADDR   00C0H.5 A   
INT0. . . . . . . . . .  B ADDR   00B0H.2 A   
INT1. . . . . . . . . .  B ADDR   00B0H.3 A   
IP0 . . . . . . . . . .  D ADDR   00A9H   A   
IP1 . . . . . . . . . .  D ADDR   00B9H   A   
IRCON . . . . . . . . .  D ADDR   00C0H   A   
IRCON1. . . . . . . . .  D ADDR   00D1H   A   
IS1OR2. . . . . . . . .  C ADDR   003AH   R   SEG=SCHEDULERSEGMENT
IS1OR2V2. . . . . . . .  C ADDR   009BH   R   SEG=SCHEDULERSEGMENT
IT0 . . . . . . . . . .  B ADDR   0088H.0 A   
IT1 . . . . . . . . . .  B ADDR   0088H.2 A   
JUSTSKIPTHELINEBEFORE .  C ADDR   0082H   R   SEG=SCHEDULERSEGMENT
MD0 . . . . . . . . . .  D ADDR   00E9H   A   
MD1 . . . . . . . . . .  D ADDR   00EAH   A   
MD2 . . . . . . . . . .  D ADDR   00EBH   A   
MD3 . . . . . . . . . .  D ADDR   00ECH   A   
MD4 . . . . . . . . . .  D ADDR   00EDH   A   
MD5 . . . . . . . . . .  D ADDR   00EEH   A   
MX0 . . . . . . . . . .  B ADDR   00D8H.0 A   
MX1 . . . . . . . . . .  B ADDR   00D8H.1 A   
MX2 . . . . . . . . . .  B ADDR   00D8H.2 A   
OV. . . . . . . . . . .  B ADDR   00D0H.2 A   
P . . . . . . . . . . .  B ADDR   00D0H.0 A   
P0. . . . . . . . . . .  D ADDR   0080H   A   
P1. . . . . . . . . . .  D ADDR   0090H   A   
P2. . . . . . . . . . .  D ADDR   00A0H   A   
P3. . . . . . . . . . .  D ADDR   00B0H   A   
P4. . . . . . . . . . .  D ADDR   00E8H   A   
P5. . . . . . . . . . .  D ADDR   00F8H   A   
P6. . . . . . . . . . .  D ADDR   00FAH   A   
P7. . . . . . . . . . .  D ADDR   00DBH   A   
P8. . . . . . . . . . .  D ADDR   00DDH   A   
PCON. . . . . . . . . .  D ADDR   0087H   A   
PSW . . . . . . . . . .  D ADDR   00D0H   A   
RB80. . . . . . . . . .  B ADDR   0098H.2 A   
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 15:15:58 PAGE     8

RD. . . . . . . . . . .  B ADDR   00B0H.7 A   
REALEND . . . . . . . .  C ADDR   010CH   R   SEG=SCHEDULERSEGMENT
REN0. . . . . . . . . .  B ADDR   0098H.4 A   
RESTORESTACK. . . . . .  C ADDR   00E4H   R   SEG=SCHEDULERSEGMENT
RESTORESTACKCOMPLETE. .  C ADDR   00ECH   R   SEG=SCHEDULERSEGMENT
RI0 . . . . . . . . . .  B ADDR   0098H.0 A   
RS0 . . . . . . . . . .  B ADDR   00D0H.3 A   
RS1 . . . . . . . . . .  B ADDR   00D0H.4 A   
RXD . . . . . . . . . .  B ADDR   00B0H.0 A   
S0BUF . . . . . . . . .  D ADDR   0099H   A   
S0CON . . . . . . . . .  D ADDR   0098H   A   
S0RELH. . . . . . . . .  D ADDR   00BAH   A   
S0RELL. . . . . . . . .  D ADDR   00AAH   A   
S1BUF . . . . . . . . .  D ADDR   009CH   A   
S1CON . . . . . . . . .  D ADDR   009BH   A   
S1RELH. . . . . . . . .  D ADDR   00BBH   A   
S1RELL. . . . . . . . .  D ADDR   009DH   A   
SAVESTACK . . . . . . .  C ADDR   0073H   R   SEG=SCHEDULERSEGMENT
SCHEDULER . . . . . . .  C ADDR   0000H   R   SEG=SCHEDULERSEGMENT
SCHEDULERSEGMENT. . . .  C SEG    010CH       REL=UNIT
SETMSK. . . . . . . . .  D ADDR   00A5H   A   
SM0 . . . . . . . . . .  B ADDR   0098H.7 A   
SM1 . . . . . . . . . .  B ADDR   0098H.6 A   
SM20. . . . . . . . . .  B ADDR   0098H.5 A   
SP. . . . . . . . . . .  D ADDR   0081H   A   
STATUSNOTRUNNING. . . .  N NUMB   0000H   A   
STATUSRUNNING . . . . .  N NUMB   0002H   A   
STATUSSTARTREQ. . . . .  N NUMB   0001H   A   
SWDT. . . . . . . . . .  B ADDR   00B8H.6 A   
SYSCON. . . . . . . . .  D ADDR   00B1H   A   
T0. . . . . . . . . . .  B ADDR   00B0H.4 A   
T1. . . . . . . . . . .  B ADDR   00B0H.5 A   
T2CM. . . . . . . . . .  B ADDR   00C8H.2 A   
T2CON . . . . . . . . .  D ADDR   00C8H   A   
T2I0. . . . . . . . . .  B ADDR   00C8H.0 A   
T2I1. . . . . . . . . .  B ADDR   00C8H.1 A   
T2PS. . . . . . . . . .  B ADDR   00C8H.7 A   
T2R0. . . . . . . . . .  B ADDR   00C8H.3 A   
T2R1. . . . . . . . . .  B ADDR   00C8H.4 A   
TB80. . . . . . . . . .  B ADDR   0098H.3 A   
TCON. . . . . . . . . .  D ADDR   0088H   A   
TF0 . . . . . . . . . .  B ADDR   0088H.5 A   
TF1 . . . . . . . . . .  B ADDR   0088H.7 A   
TF2 . . . . . . . . . .  B ADDR   00C0H.6 A   
TH0 . . . . . . . . . .  D ADDR   008CH   A   
TH1 . . . . . . . . . .  D ADDR   008DH   A   
TH2 . . . . . . . . . .  D ADDR   00CDH   A   
TI0 . . . . . . . . . .  B ADDR   0098H.1 A   
TIHANDLER . . . . . . .  C ADDR   001BH   R   SEG=SCHEDULERSEGMENT
TL0 . . . . . . . . . .  D ADDR   008AH   A   
TL1 . . . . . . . . . .  D ADDR   008BH   A   
TL2 . . . . . . . . . .  D ADDR   00CCH   A   
TMOD. . . . . . . . . .  D ADDR   0089H   A   
TR0 . . . . . . . . . .  B ADDR   0088H.4 A   
TR1 . . . . . . . . . .  B ADDR   0088H.6 A   
TXD . . . . . . . . . .  B ADDR   00B0H.1 A   
WDT . . . . . . . . . .  B ADDR   00A8H.6 A   
WDTH. . . . . . . . . .  D ADDR   0085H   A   
WDTL. . . . . . . . . .  D ADDR   0084H   A   
WDTREL. . . . . . . . .  D ADDR   0086H   A   
WR. . . . . . . . . . .  B ADDR   00B0H.6 A   
XPAGE . . . . . . . . .  D ADDR   0091H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
