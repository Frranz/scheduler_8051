A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 21:04:20 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\scheduler.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE scheduler.a51 SET(SMALL) DEBUG PRINT(.\Listings\scheduler.lst) OBJECT(.
                      \Objects\scheduler.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     $nomod51 
                       2     ;#include <Reg517a.inc>
                +1     3     ;-------------------------------------------------------------------------------
                +1     4     ; Copyright 1995-1996 KEIL Software, Inc.
                +1     5     ; 80517A Processor Declarations
                +1     6     ;-------------------------------------------------------------------------------
                +1     7  +1 $save 
                +1   199  +1 $restore 
                +1   200     
                     201     
                     202     
                     203     NAME scheduler
                     204     PUBLIC scheduler
                     205             
                     206     EXTRN CODE(consoleProcess)      
                     207             
                     208             ;define timer1 interupt routine
----                 209             cseg at 001bh
001B 020000   F      210             jmp tihandler   
                     211             
                     212     schedulerSegment SEGMENT CODE
----                 213             RSEG schedulerSegment
                     214             
0000                 215     scheduler:
                     216             ;define process status values
  0000               217             statusNotRunning equ 0
  0001               218             statusStartReq equ 1
  0002               219             statusRunning equ 2
                     220             
                     221             ;start
0000                 222             org 0000h
                     223             
                     224             ;enable all interrupts
0000 D2AF            225             setb eal
                     226             
                     227             ;configure timer1
0002 758D00          228             mov th1,#0
0005 758B00          229             mov tl1,#0
                     230             
                     231             ;enable and start timer 1
0008 D2AB            232             setb et1
000A D28E            233             setb tr1
                     234             
                     235             ;start console process
000C 120000   F      236             call consoleProcess
000F 020000   F      237             jmp endloop                                     ;should not be reached
                     238             
                     239             
0012                 240     tihandler:
                     241             
                     242             ;save accu and r0
0012 881A            243             mov 0x1a,r0
0014 F51B            244             mov 0x1b,A
                     245             
                     246             ;check priorites
                     247             ;if left timeslots are 0 reset them and change to the next processs
0016 E51C            248             mov A,0x1c
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 21:04:20 PAGE     2

0018 6400            249             xrl A,#0
001A 6012            250             jz prioCons
001C E51C            251             mov A,0x1c
001E 6401            252             xrl A,#1
0020 601C            253             jz prioA
0022 E51C            254             mov A,0x1c
0024 6402            255             xrl A,#2
0026 6026            256             jz prioB
0028 E51C            257             mov A,0x1c
002A 6403            258             xrl A,#3
002C 6030            259             jz prioZ
                     260             
002E                 261             prioCons:
002E E591            262                     mov A,0x91
0030 7005            263                     jnz decPrioCons
0032 859091          264                     mov 0x91,0x90
0035 803C            265                     jmp changeProcess
0037                 266                     decPrioCons:
0037 E591            267                             mov A,0x91
0039 14              268                             dec A
003A F591            269                             mov 0x91,A
003C 8030            270                             jmp returnToProcess
003E                 271             prioA:
003E E593            272                     mov A,0x93
0040 7005            273                     jnz decPrioA
0042 859293          274                     mov 0x93,0x92
0045 802C            275                     jmp changeProcess
0047                 276                     decPrioA:
0047 E593            277                             mov A,0x93
0049 14              278                             dec A
004A F593            279                             mov 0x93,A
004C 8020            280                             jmp returnToProcess
004E                 281             prioB:
004E E595            282                     mov A,0x95
0050 7005            283                     jnz decPrioB
0052 859495          284                     mov 0x95,0x94
0055 801C            285                     jmp changeProcess
0057                 286                     decPrioB:
0057 E595            287                             mov A,0x95
0059 14              288                             dec A
005A F595            289                             mov 0x95,A
005C 8010            290                             jmp returnToProcess
                     291                     
005E                 292             prioZ:
005E E597            293                     mov A,0x97
0060 7005            294                     jnz decPrioZ
0062 859697          295                     mov 0x97,0x96
0065 800C            296                     jmp changeProcess
0067                 297                     decPrioZ:
0067 E597            298                             mov A,0x97
0069 14              299                             dec A
006A F597            300                             mov 0x97,A
006C 8000            301                             jmp returnToProcess
                     302                     
                     303             
006E                 304             returnToProcess:
                     305                     ;reload r0 and acc from save area
006E A81A            306                     mov r0,0x1a
0070 E51B            307                     mov a,0x1b
0072 32              308                     reti
                     309             
0073                 310             changeProcess:
                     311             
                     312             ;save next adress of interruped process
                     313             ;find next adress space for the process
0073 E51C            314             mov A,0x1c      ;moves process id in a
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 21:04:20 PAGE     3

0075 23              315             rl      A               ;quick multiply A by two, because adress is 2 bits long
0076 2421            316             add A,#21h      ;add offset to beginning of next adress area
                     317             
                     318             ;move adress from stack to calculated adress
0078 F8              319             mov r0,A
                     320             ;first pop high
0079 08              321             inc r0
007A D0E0            322             pop ACC
007C F6              323             mov @r0,A
                     324             ;then low
007D 18              325             dec r0
007E D0E0            326             pop ACC
0080 F6              327             mov @r0,A
                     328             
                     329             ;save rest of context
0081 E51C            330             mov A,0x1c
0083 A81C            331             mov r0,0x1c
                     332             
                     333             ;calculate offset in register safe (id * size of one register store[20])
                     334             ;using rl A for convenience of multiplaying by 2
0085 23              335             rl A
0086 23              336             rl A
0087 23              337             rl A
0088 23              338             rl A
                     339             ;adding stack size
0089 B80002          340             cjne r0,#0,is1or2
008C 8010            341             jmp afterCalculatingOffset
008E                 342             is1or2:
008E 2408            343                     add A,#8
0090 B80102          344                     cjne r0,#1,is2or3
0093 8009            345                     jmp afterCalculatingOffset
0095                 346                     is2or3:
0095 2408            347                     add A,#8
0097 B80202          348                     cjne r0,#2,is3
009A 8002            349                     jmp afterCalculatingOffset
009C                 350                     is3:
009C 2408            351                     add A,#8
                     352             
                     353     
                     354     
009E                 355             afterCalculatingOffset: 
                     356             ;add start adress of register safe
009E 2429            357             add A,#29h
00A0 F8              358             mov r0,A
                     359             
                     360             ;save registers
00A1 A61A            361             mov @r0,0x1a ;r0 from register save space
00A3 08              362             inc r0
00A4 A601            363             mov @r0,1
00A6 08              364             inc r0
00A7 A602            365             mov @r0,2
00A9 08              366             inc r0
00AA A603            367             mov @r0,3
00AC 08              368             inc r0
00AD A604            369             mov @r0,4
00AF 08              370             inc r0
00B0 A605            371             mov @r0,5
00B2 08              372             inc r0
00B3 A606            373             mov @r0,6
00B5 08              374             inc r0
00B6 A607            375             mov @r0,7
00B8 08              376             inc r0
00B9 A61B            377             mov @r0,0x1b ;reg A from save space
00BB 08              378             inc r0
00BC A6F0            379             mov @r0,b
00BE 08              380             inc r0
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 21:04:20 PAGE     4

00BF A681            381             mov @r0,SP
00C1 08              382             inc r0
00C2 A682            383             mov @r0,dpl
00C4 08              384             inc r0
00C5 A683            385             mov @r0,dph
00C7 08              386             inc r0
00C8 A6D0            387             mov @r0,psw
00CA 08              388             inc r0
                     389             
                     390             ;save stack
00CB 7907            391             mov r1,#7
00CD AA81            392             mov r2,SP
00CF 0A              393             inc r2
                     394             ;saves up from 7 until sp value is reached
00D0                 395             saveStack:      
00D0 E7              396                     mov A,@r1
00D1 F6              397                     mov @r0,A
00D2 09              398                     inc r1
00D3 08              399                     inc r0
00D4 E9              400                     mov A,r1
00D5 6A              401                     xrl A,r2 ;to act like compare equal
00D6 70F8            402                     jnz saveStack
                     403             
                     404     
                     405             
00D8                 406             findNextProcess:
                     407                     ;find next program to execute
00D8 E51C            408                     mov A,0x1c
00DA 04              409                     inc A
                     410                     
                     411                     ;build modulo 4 (making 0 if its 4)
00DB B40401          412                     cjne A,#4,justSkipTheLineBefore
00DE E4              413                     clr A
                     414                     
00DF                 415                     justSkipTheLineBefore:
                     416                     ;save new current process
00DF F51C            417                     mov 0x1c,A
                     418                     
                     419                     ;check if process has status running or start request
00E1 241D            420                     add A,#1dh
00E3 F8              421                     mov r0,A
00E4 E6              422                     mov A,@r0
00E5 6400            423                     xrl A,#statusNotRunning
00E7 60EF            424                     jz findNextProcess
                     425     
                     426             
                     427             ;load context of next process   
                     428             
                     429             ;switch register bank to 2
00E9 43D010          430             orl psw,#00010000b
                     431             
                     432             ;get start adress of saved context
00EC E51C            433             mov A,0x1c
00EE F8              434             mov r0,A
00EF 23              435             rl A
00F0 23              436             rl A
00F1 23              437             rl A
00F2 23              438             rl A
                     439             ;adding stack size
00F3 B80002          440             cjne r0,#0,is1or2v2
00F6 8010            441             jmp afterCalculatingOffset2
00F8                 442             is1or2v2:
00F8 2408            443                     add A,#8
00FA B80102          444                     cjne r0,#1,is2or3v2
00FD 8009            445                     jmp afterCalculatingOffset2
00FF                 446                     is2or3v2:
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 21:04:20 PAGE     5

00FF 2408            447                     add A,#8
0101 B80202          448                     cjne r0,#2,is3v2
0104 8002            449                     jmp afterCalculatingOffset2
0106                 450                     is3v2:
0106 2408            451                     add A,#8
                     452             
                     453     
                     454     
0108                 455             afterCalculatingOffset2:
                     456             ;adding start adress of register safe
0108 2429            457             add A,#29h
010A F8              458             mov r0,A
                     459             
                     460             ;restore registers
010B 8600            461             mov 0,@r0
010D 08              462             inc r0
010E 8601            463             mov 1,@r0
0110 08              464             inc r0
0111 8602            465             mov 2,@r0
0113 08              466             inc r0
0114 8603            467             mov 3,@r0
0116 08              468             inc r0
0117 8604            469             mov 4,@r0
0119 08              470             inc r0
011A 8605            471             mov 5,@r0
011C 08              472             inc r0
011D 8606            473             mov 6,@r0
011F 08              474             inc r0
0120 8607            475             mov 7,@r0
0122 08              476             inc r0
0123 E6              477             mov A,@r0
0124 08              478             inc r0
0125 86F0            479             mov b,@r0
0127 08              480             inc r0
0128 8681            481             mov sp,@r0
012A 08              482             inc r0
012B 8682            483             mov dpl,@r0
012D 08              484             inc r0
012E 8683            485             mov dph,@r0
0130 08              486             inc r0
                     487             
                     488             ;resave A,0
0131 F51B            489             mov 0x1b,A
                     490             
                     491             ;restore psw later to stay in register bank 2
0133 E8              492             mov A,r0
0134 FA              493             mov r2,A
0135 08              494             inc r0
                     495             
                     496             ;if process is in status start request set sp manually #7
0136 E51C            497             mov A,0x1c
0138 241D            498             add A,#1dh
013A B40108          499             cjne A,#statusStartReq,beforeRestoreStack
013D 758107          500             mov sp,#7       ;set default for sp & change status
0140 241D            501             add A,#1dh
0142 F9              502             mov r1,A
0143 7602            503             mov @r0,#statusRunning
                     504             
                     505             
0145                 506             beforeRestoreStack:
0145 AC81            507             mov r4,sp
0147 7907            508             mov r1,#7
0149 E9              509             mov A,r1
014A 6C              510             xrl A,r4 ;jump over in case stack didnt grow
014B 6008            511             jz restoreStackComplete
014D                 512             restoreStack:
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 21:04:20 PAGE     6

014D E6              513                     mov A,@r0
014E F7              514                     mov @r1,A
014F 09              515                     inc r1
0150 08              516                     inc r0
0151 E9              517                     mov A,r1
                     518                     ;check if r1 equals sp
0152 6C              519                     xrl A,r4
0153 70F8            520                     jnz restoreStack
                     521             
0155                 522             restoreStackComplete:
                     523             ;push return adress onto stack                          
0155 E51C            524             mov A,0x1c
0157 23              525             rl  A
0158 2421            526             add A,#21h
015A F8              527             mov r0,A
                     528             
015B 8618            529             mov 0x18,@r0
015D 08              530             inc r0
015E 8619            531             mov 0x19,@r0
0160 C018            532             push 0x18
0162 C019            533             push 0x19
                     534             
                     535             
                     536             ;restore psw to swtich back to reg-bank 0
0164 EA              537             mov A,r2
0165 F8              538             mov r0,A
0166 86D0            539             mov psw,@r0
0168 E51B            540             mov A,0x1b
                     541             
                     542             
016A 32              543             reti
                     544             
016B                 545     endloop:
016B 00              546             nop
016C D2AE            547             setb wdt
016E D2BE            548             setb swdt
0170 80F9            549             jmp endloop
                     550     
                     551             end
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 21:04:20 PAGE     7

SYMBOL TABLE LISTING
------ ----- -------


N A M E                  T Y P E  V A L U E   ATTRIBUTES

AC. . . . . . . . . . .  B ADDR   00D0H.6 A   
ACC . . . . . . . . . .  D ADDR   00E0H   A   
ADCON0. . . . . . . . .  D ADDR   00D8H   A   
ADCON1. . . . . . . . .  D ADDR   00DCH   A   
ADDATH. . . . . . . . .  D ADDR   00D9H   A   
ADDATL. . . . . . . . .  D ADDR   00DAH   A   
ADEX. . . . . . . . . .  B ADDR   00D8H.5 A   
ADM . . . . . . . . . .  B ADDR   00D8H.3 A   
AFTERCALCULATINGOFFSET.  C ADDR   009EH   R   SEG=SCHEDULERSEGMENT
AFTERCALCULATINGOFFSET2  C ADDR   0108H   R   SEG=SCHEDULERSEGMENT
ARCON . . . . . . . . .  D ADDR   00EFH   A   
B . . . . . . . . . . .  D ADDR   00F0H   A   
BD. . . . . . . . . . .  B ADDR   00D8H.7 A   
BEFORERESTORESTACK. . .  C ADDR   0145H   R   SEG=SCHEDULERSEGMENT
BSY . . . . . . . . . .  B ADDR   00D8H.4 A   
CC4EN . . . . . . . . .  D ADDR   00C9H   A   
CCEN. . . . . . . . . .  D ADDR   00C1H   A   
CCH1. . . . . . . . . .  D ADDR   00C3H   A   
CCH2. . . . . . . . . .  D ADDR   00C5H   A   
CCH3. . . . . . . . . .  D ADDR   00C7H   A   
CCH4. . . . . . . . . .  D ADDR   00CFH   A   
CCL1. . . . . . . . . .  D ADDR   00C2H   A   
CCL2. . . . . . . . . .  D ADDR   00C4H   A   
CCL3. . . . . . . . . .  D ADDR   00C6H   A   
CCL4. . . . . . . . . .  D ADDR   00CEH   A   
CHANGEPROCESS . . . . .  C ADDR   0073H   R   SEG=SCHEDULERSEGMENT
CLK . . . . . . . . . .  B ADDR   00D8H.6 A   
CLRMSK. . . . . . . . .  D ADDR   00A6H   A   
CMEN. . . . . . . . . .  D ADDR   00F6H   A   
CMH0. . . . . . . . . .  D ADDR   00D3H   A   
CMH1. . . . . . . . . .  D ADDR   00D5H   A   
CMH2. . . . . . . . . .  D ADDR   00D7H   A   
CMH3. . . . . . . . . .  D ADDR   00E3H   A   
CMH4. . . . . . . . . .  D ADDR   00E5H   A   
CMH5. . . . . . . . . .  D ADDR   00E7H   A   
CMH6. . . . . . . . . .  D ADDR   00F3H   A   
CMH7. . . . . . . . . .  D ADDR   00F5H   A   
CML0. . . . . . . . . .  D ADDR   00D2H   A   
CML1. . . . . . . . . .  D ADDR   00D4H   A   
CML2. . . . . . . . . .  D ADDR   00D6H   A   
CML3. . . . . . . . . .  D ADDR   00E2H   A   
CML4. . . . . . . . . .  D ADDR   00E4H   A   
CML5. . . . . . . . . .  D ADDR   00E6H   A   
CML6. . . . . . . . . .  D ADDR   00F2H   A   
CML7. . . . . . . . . .  D ADDR   00F4H   A   
CMSEL . . . . . . . . .  D ADDR   00F7H   A   
COMCLRH . . . . . . . .  D ADDR   00A4H   A   
COMCLRL . . . . . . . .  D ADDR   00A3H   A   
COMSETH . . . . . . . .  D ADDR   00A2H   A   
COMSETL . . . . . . . .  D ADDR   00A1H   A   
CONSOLEPROCESS. . . . .  C ADDR   -----       EXT
CRCH. . . . . . . . . .  D ADDR   00CBH   A   
CRCL. . . . . . . . . .  D ADDR   00CAH   A   
CTCON . . . . . . . . .  D ADDR   00E1H   A   
CTRELH. . . . . . . . .  D ADDR   00DFH   A   
CTRELL. . . . . . . . .  D ADDR   00DEH   A   
CY. . . . . . . . . . .  B ADDR   00D0H.7 A   
DECPRIOA. . . . . . . .  C ADDR   0047H   R   SEG=SCHEDULERSEGMENT
DECPRIOB. . . . . . . .  C ADDR   0057H   R   SEG=SCHEDULERSEGMENT
DECPRIOCONS . . . . . .  C ADDR   0037H   R   SEG=SCHEDULERSEGMENT
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 21:04:20 PAGE     8

DECPRIOZ. . . . . . . .  C ADDR   0067H   R   SEG=SCHEDULERSEGMENT
DPH . . . . . . . . . .  D ADDR   0083H   A   
DPL . . . . . . . . . .  D ADDR   0082H   A   
DPSEL . . . . . . . . .  D ADDR   0092H   A   
EADC. . . . . . . . . .  B ADDR   00B8H.0 A   
EAL . . . . . . . . . .  B ADDR   00A8H.7 A   
ENDLOOP . . . . . . . .  C ADDR   016BH   R   SEG=SCHEDULERSEGMENT
ES. . . . . . . . . . .  B ADDR   00A8H.4 A   
ET0 . . . . . . . . . .  B ADDR   00A8H.1 A   
ET1 . . . . . . . . . .  B ADDR   00A8H.3 A   
ET2 . . . . . . . . . .  B ADDR   00A8H.5 A   
EX0 . . . . . . . . . .  B ADDR   00A8H.0 A   
EX1 . . . . . . . . . .  B ADDR   00A8H.2 A   
EX2 . . . . . . . . . .  B ADDR   00B8H.1 A   
EX3 . . . . . . . . . .  B ADDR   00B8H.2 A   
EX4 . . . . . . . . . .  B ADDR   00B8H.3 A   
EX5 . . . . . . . . . .  B ADDR   00B8H.4 A   
EX6 . . . . . . . . . .  B ADDR   00B8H.5 A   
EXEN2 . . . . . . . . .  B ADDR   00B8H.7 A   
EXF2. . . . . . . . . .  B ADDR   00C0H.7 A   
F0. . . . . . . . . . .  B ADDR   00D0H.5 A   
F1. . . . . . . . . . .  B ADDR   00D0H.1 A   
FINDNEXTPROCESS . . . .  C ADDR   00D8H   R   SEG=SCHEDULERSEGMENT
I2FR. . . . . . . . . .  B ADDR   00C8H.5 A   
I3FR. . . . . . . . . .  B ADDR   00C8H.6 A   
IADC. . . . . . . . . .  B ADDR   00C0H.0 A   
IE0 . . . . . . . . . .  B ADDR   0088H.1 A   
IE1 . . . . . . . . . .  B ADDR   0088H.3 A   
IEN0. . . . . . . . . .  D ADDR   00A8H   A   
IEN1. . . . . . . . . .  D ADDR   00B8H   A   
IEN2. . . . . . . . . .  D ADDR   009AH   A   
IEX2. . . . . . . . . .  B ADDR   00C0H.1 A   
IEX3. . . . . . . . . .  B ADDR   00C0H.2 A   
IEX4. . . . . . . . . .  B ADDR   00C0H.3 A   
IEX5. . . . . . . . . .  B ADDR   00C0H.4 A   
IEX6. . . . . . . . . .  B ADDR   00C0H.5 A   
INT0. . . . . . . . . .  B ADDR   00B0H.2 A   
INT1. . . . . . . . . .  B ADDR   00B0H.3 A   
IP0 . . . . . . . . . .  D ADDR   00A9H   A   
IP1 . . . . . . . . . .  D ADDR   00B9H   A   
IRCON . . . . . . . . .  D ADDR   00C0H   A   
IRCON1. . . . . . . . .  D ADDR   00D1H   A   
IS1OR2. . . . . . . . .  C ADDR   008EH   R   SEG=SCHEDULERSEGMENT
IS1OR2V2. . . . . . . .  C ADDR   00F8H   R   SEG=SCHEDULERSEGMENT
IS2OR3. . . . . . . . .  C ADDR   0095H   R   SEG=SCHEDULERSEGMENT
IS2OR3V2. . . . . . . .  C ADDR   00FFH   R   SEG=SCHEDULERSEGMENT
IS3 . . . . . . . . . .  C ADDR   009CH   R   SEG=SCHEDULERSEGMENT
IS3V2 . . . . . . . . .  C ADDR   0106H   R   SEG=SCHEDULERSEGMENT
IT0 . . . . . . . . . .  B ADDR   0088H.0 A   
IT1 . . . . . . . . . .  B ADDR   0088H.2 A   
JUSTSKIPTHELINEBEFORE .  C ADDR   00DFH   R   SEG=SCHEDULERSEGMENT
MD0 . . . . . . . . . .  D ADDR   00E9H   A   
MD1 . . . . . . . . . .  D ADDR   00EAH   A   
MD2 . . . . . . . . . .  D ADDR   00EBH   A   
MD3 . . . . . . . . . .  D ADDR   00ECH   A   
MD4 . . . . . . . . . .  D ADDR   00EDH   A   
MD5 . . . . . . . . . .  D ADDR   00EEH   A   
MX0 . . . . . . . . . .  B ADDR   00D8H.0 A   
MX1 . . . . . . . . . .  B ADDR   00D8H.1 A   
MX2 . . . . . . . . . .  B ADDR   00D8H.2 A   
OV. . . . . . . . . . .  B ADDR   00D0H.2 A   
P . . . . . . . . . . .  B ADDR   00D0H.0 A   
P0. . . . . . . . . . .  D ADDR   0080H   A   
P1. . . . . . . . . . .  D ADDR   0090H   A   
P2. . . . . . . . . . .  D ADDR   00A0H   A   
P3. . . . . . . . . . .  D ADDR   00B0H   A   
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 21:04:20 PAGE     9

P4. . . . . . . . . . .  D ADDR   00E8H   A   
P5. . . . . . . . . . .  D ADDR   00F8H   A   
P6. . . . . . . . . . .  D ADDR   00FAH   A   
P7. . . . . . . . . . .  D ADDR   00DBH   A   
P8. . . . . . . . . . .  D ADDR   00DDH   A   
PCON. . . . . . . . . .  D ADDR   0087H   A   
PRIOA . . . . . . . . .  C ADDR   003EH   R   SEG=SCHEDULERSEGMENT
PRIOB . . . . . . . . .  C ADDR   004EH   R   SEG=SCHEDULERSEGMENT
PRIOCONS. . . . . . . .  C ADDR   002EH   R   SEG=SCHEDULERSEGMENT
PRIOZ . . . . . . . . .  C ADDR   005EH   R   SEG=SCHEDULERSEGMENT
PSW . . . . . . . . . .  D ADDR   00D0H   A   
RB80. . . . . . . . . .  B ADDR   0098H.2 A   
RD. . . . . . . . . . .  B ADDR   00B0H.7 A   
REN0. . . . . . . . . .  B ADDR   0098H.4 A   
RESTORESTACK. . . . . .  C ADDR   014DH   R   SEG=SCHEDULERSEGMENT
RESTORESTACKCOMPLETE. .  C ADDR   0155H   R   SEG=SCHEDULERSEGMENT
RETURNTOPROCESS . . . .  C ADDR   006EH   R   SEG=SCHEDULERSEGMENT
RI0 . . . . . . . . . .  B ADDR   0098H.0 A   
RS0 . . . . . . . . . .  B ADDR   00D0H.3 A   
RS1 . . . . . . . . . .  B ADDR   00D0H.4 A   
RXD . . . . . . . . . .  B ADDR   00B0H.0 A   
S0BUF . . . . . . . . .  D ADDR   0099H   A   
S0CON . . . . . . . . .  D ADDR   0098H   A   
S0RELH. . . . . . . . .  D ADDR   00BAH   A   
S0RELL. . . . . . . . .  D ADDR   00AAH   A   
S1BUF . . . . . . . . .  D ADDR   009CH   A   
S1CON . . . . . . . . .  D ADDR   009BH   A   
S1RELH. . . . . . . . .  D ADDR   00BBH   A   
S1RELL. . . . . . . . .  D ADDR   009DH   A   
SAVESTACK . . . . . . .  C ADDR   00D0H   R   SEG=SCHEDULERSEGMENT
SCHEDULER . . . . . . .  C ADDR   0000H   R   SEG=SCHEDULERSEGMENT
SCHEDULERSEGMENT. . . .  C SEG    0172H       REL=UNIT
SETMSK. . . . . . . . .  D ADDR   00A5H   A   
SM0 . . . . . . . . . .  B ADDR   0098H.7 A   
SM1 . . . . . . . . . .  B ADDR   0098H.6 A   
SM20. . . . . . . . . .  B ADDR   0098H.5 A   
SP. . . . . . . . . . .  D ADDR   0081H   A   
STATUSNOTRUNNING. . . .  N NUMB   0000H   A   
STATUSRUNNING . . . . .  N NUMB   0002H   A   
STATUSSTARTREQ. . . . .  N NUMB   0001H   A   
SWDT. . . . . . . . . .  B ADDR   00B8H.6 A   
SYSCON. . . . . . . . .  D ADDR   00B1H   A   
T0. . . . . . . . . . .  B ADDR   00B0H.4 A   
T1. . . . . . . . . . .  B ADDR   00B0H.5 A   
T2CM. . . . . . . . . .  B ADDR   00C8H.2 A   
T2CON . . . . . . . . .  D ADDR   00C8H   A   
T2I0. . . . . . . . . .  B ADDR   00C8H.0 A   
T2I1. . . . . . . . . .  B ADDR   00C8H.1 A   
T2PS. . . . . . . . . .  B ADDR   00C8H.7 A   
T2R0. . . . . . . . . .  B ADDR   00C8H.3 A   
T2R1. . . . . . . . . .  B ADDR   00C8H.4 A   
TB80. . . . . . . . . .  B ADDR   0098H.3 A   
TCON. . . . . . . . . .  D ADDR   0088H   A   
TF0 . . . . . . . . . .  B ADDR   0088H.5 A   
TF1 . . . . . . . . . .  B ADDR   0088H.7 A   
TF2 . . . . . . . . . .  B ADDR   00C0H.6 A   
TH0 . . . . . . . . . .  D ADDR   008CH   A   
TH1 . . . . . . . . . .  D ADDR   008DH   A   
TH2 . . . . . . . . . .  D ADDR   00CDH   A   
TI0 . . . . . . . . . .  B ADDR   0098H.1 A   
TIHANDLER . . . . . . .  C ADDR   0012H   R   SEG=SCHEDULERSEGMENT
TL0 . . . . . . . . . .  D ADDR   008AH   A   
TL1 . . . . . . . . . .  D ADDR   008BH   A   
TL2 . . . . . . . . . .  D ADDR   00CCH   A   
TMOD. . . . . . . . . .  D ADDR   0089H   A   
TR0 . . . . . . . . . .  B ADDR   0088H.4 A   
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 21:04:20 PAGE    10

TR1 . . . . . . . . . .  B ADDR   0088H.6 A   
TXD . . . . . . . . . .  B ADDR   00B0H.1 A   
WDT . . . . . . . . . .  B ADDR   00A8H.6 A   
WDTH. . . . . . . . . .  D ADDR   0085H   A   
WDTL. . . . . . . . . .  D ADDR   0084H   A   
WDTREL. . . . . . . . .  D ADDR   0086H   A   
WR. . . . . . . . . . .  B ADDR   00B0H.6 A   
XPAGE . . . . . . . . .  D ADDR   0091H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
