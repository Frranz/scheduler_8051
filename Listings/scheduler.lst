A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 18:22:17 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\scheduler.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE scheduler.a51 SET(SMALL) DEBUG PRINT(.\Listings\scheduler.lst) OBJECT(.
                      \Objects\scheduler.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     $nomod51 
                       2     ;#include <Reg517a.inc>
                +1     3     ;-------------------------------------------------------------------------------
                +1     4     ; Copyright 1995-1996 KEIL Software, Inc.
                +1     5     ; 80517A Processor Declarations
                +1     6     ;-------------------------------------------------------------------------------
                +1     7  +1 $save 
                +1   199  +1 $restore 
                +1   200     
                     201     
                     202     
                     203     NAME scheduler
                     204     PUBLIC scheduler
                     205             
                     206     EXTRN CODE(consoleProcess)      
                     207             
                     208             ;define timer2 interupt routine
----                 209             cseg at 001bh
001B 020000   F      210             jmp tihandler   
                     211             
                     212     schedulerSegment SEGMENT CODE
                     213             ; switch to the created relocatable segment
----                 214             RSEG schedulerSegment
                     215             
0000                 216     scheduler:
                     217             ;define process status values
  0000               218             statusNotRunning equ 0
  0001               219             statusStartReq equ 1
  0002               220             statusRunning equ 2
                     221             
                     222             ;start
0000                 223             org 0000h
                     224                     
0000 900000   F      225             mov dptr,#consoleProcess
0003 858221          226             mov 0x21,dpl
0006 858322          227             mov 0x22,dph
                     228             
                     229             ;enable all interrupts
0009 D2AF            230             setb eal
000B 758D00          231             mov th1,#0
000E 758B00          232             mov tl1,#0
                     233             
                     234             ;enable and start timer 1
0011 D2AB            235             setb et1
0013 D28E            236             setb tr1
                     237             
                     238             ;start console process DELETE THIS
0015 120000   F      239             call consoleProcess
0018 020000   F      240             jmp endloop
                     241             
                     242             
001B                 243     tihandler:
                     244             ;do scheduelr stuff here
                     245             
                     246             ;save old adress
                     247             ;put accu & r0 in save space to do some basic calc
001B 881A            248             mov 0x1a,r0
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 18:22:17 PAGE     2

001D F51B            249             mov 0x1b,A
                     250             
                     251             ;save next adress of interruped process
                     252             ;find next adress space for the process
001F E51C            253             mov A,0x1c      ;moves process id in a
0021 23              254             rl      A               ;quick multiply A by two, because adress is 2 bits long
0022 2421            255             add A,#21h      ;add offset to beginning of next adress area
                     256             
                     257     ;       ;move adress from stack to calculated adress                                    don
                             t save return adress, cuz we save whole stack afterwards
0024 F8              258             mov r0,A
                     259             ;first pop high
0025 08              260             inc r0
0026 D0E0            261             pop ACC
0028 F6              262             mov @r0,A
                     263             ;then low
0029 18              264             dec r0
002A D0E0            265             pop ACC
002C F6              266             mov @r0,A
                     267             
                     268             ;save rest of context
002D E51C            269             mov A,0x1c
002F A81C            270             mov r0,0x1c
                     271             
                     272             ;calculate offset in register safe (id * size of one register store[32])
0031 23              273             rl A
0032 23              274             rl A
0033 23              275             rl A
0034 23              276             rl A
                     277             ;adding stack size
0035 B80002          278             cjne r0,#0,is1or2
0038 8010            279             jmp afterCalculatingOffset
003A                 280             is1or2:
003A 2408            281                     add A,#8
003C B80102          282                     cjne r0,#1,is2or3
003F 8009            283                     jmp afterCalculatingOffset
0041                 284                     is2or3:
0041 2408            285                     add A,#8
0043 B80202          286                     cjne r0,#2,is3
0046 8002            287                     jmp afterCalculatingOffset
0048                 288                     is3:
0048 2408            289                     add A,#8
                     290             
                     291     
                     292     
004A                 293             afterCalculatingOffset: 
                     294             ;add start adress of register safe
004A 2429            295             add A,#29h
004C F8              296             mov r0,A
                     297             
                     298             ;actually save registers
004D A61A            299             mov @r0,0x1a ;r0 from register save space
004F 08              300             inc r0
0050 A601            301             mov @r0,1
0052 08              302             inc r0
0053 A602            303             mov @r0,2
0055 08              304             inc r0
0056 A603            305             mov @r0,3
0058 08              306             inc r0
0059 A604            307             mov @r0,4
005B 08              308             inc r0
005C A605            309             mov @r0,5
005E 08              310             inc r0
005F A606            311             mov @r0,6
0061 08              312             inc r0
0062 A607            313             mov @r0,7
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 18:22:17 PAGE     3

0064 08              314             inc r0
0065 A61B            315             mov @r0,0x1b ;reg A from save space
0067 08              316             inc r0
0068 A6F0            317             mov @r0,b
006A 08              318             inc r0
006B A681            319             mov @r0,SP
006D 08              320             inc r0
006E A682            321             mov @r0,dpl
0070 08              322             inc r0
0071 A683            323             mov @r0,dph
0073 08              324             inc r0
0074 A6D0            325             mov @r0,psw
0076 08              326             inc r0
                     327             ;save stack
0077 7907            328             mov r1,#7
0079 AA81            329             mov r2,SP
007B 0A              330             inc r2
007C                 331             saveStack:      
007C E7              332                     mov A,@r1
007D F6              333                     mov @r0,A
007E 09              334                     inc r1
007F 08              335                     inc r0
0080 E9              336                     mov A,r1
0081 6A              337                     xrl A,r2 ;to act like compare equal
0082 70F8            338                     jnz saveStack
                     339             
                     340     
                     341             
0084                 342             findNextProcess:
                     343                     ;find next program to execute
0084 E51C            344                     mov A,0x1c
0086 04              345                     inc A
                     346                     
                     347                     ;build modulo 3 (making 0 if its 3)
0087 B40401          348                     cjne A,#4,justSkipTheLineBefore
008A E4              349                     clr A
                     350                     
008B                 351                     justSkipTheLineBefore:
                     352                     ;save new current process
008B F51C            353                     mov 0x1c,A
                     354                     
                     355                     ;check if started
008D 241D            356                     add A,#1dh
008F F8              357                     mov r0,A
0090 E6              358                     mov A,@r0
0091 6400            359                     xrl A,#statusNotRunning
0093 60EF            360                     jz findNextProcess
                     361     ;               mov r0,A
                     362     ;               cjne @r0,#statusRunning,findNextProcess
                     363             
                     364             ;load context of next process   
                     365             ;calc context adress
                     366             ;switch register bank to 2
0095 43D010          367             orl psw,#00010000b
                     368     ;       mov A,0x58
                     369     ;       rl  A
                     370     ;       add A,#5ch
                     371     ;       mov r0,A
                     372             
                     373             ;get start adress of saved context
0098 E51C            374             mov A,0x1c
009A F8              375             mov r0,A
009B 23              376             rl A
009C 23              377             rl A
009D 23              378             rl A
009E 23              379             rl A
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 18:22:17 PAGE     4

009F B80002          380             cjne r0,#0,is1or2v2
00A2 8010            381             jmp afterCalculatingOffset2
00A4                 382             is1or2v2:
00A4 2408            383                     add A,#8
00A6 B80102          384                     cjne r0,#1,is2or3v2
00A9 8009            385                     jmp afterCalculatingOffset2
00AB                 386                     is2or3v2:
00AB 2408            387                     add A,#8
00AD B80202          388                     cjne r0,#2,is3v2
00B0 8002            389                     jmp afterCalculatingOffset2
00B2                 390                     is3v2:
00B2 2408            391                     add A,#8
                     392             
                     393     
                     394     
00B4                 395             afterCalculatingOffset2:        
00B4 2429            396             add A,#29h
00B6 F8              397             mov r0,A
                     398             
                     399             ;restore registers
00B7 8600            400             mov 0,@r0
00B9 08              401             inc r0
00BA 8601            402             mov 1,@r0
00BC 08              403             inc r0
00BD 8602            404             mov 2,@r0
00BF 08              405             inc r0
00C0 8603            406             mov 3,@r0
00C2 08              407             inc r0
00C3 8604            408             mov 4,@r0
00C5 08              409             inc r0
00C6 8605            410             mov 5,@r0
00C8 08              411             inc r0
00C9 8606            412             mov 6,@r0
00CB 08              413             inc r0
00CC 8607            414             mov 7,@r0
00CE 08              415             inc r0
00CF E6              416             mov A,@r0
00D0 08              417             inc r0
00D1 86F0            418             mov b,@r0
00D3 08              419             inc r0
00D4 8681            420             mov sp,@r0
00D6 08              421             inc r0
00D7 8682            422             mov dpl,@r0
00D9 08              423             inc r0
00DA 8683            424             mov dph,@r0
00DC 08              425             inc r0
                     426             
                     427             ;resave A,0
00DD F51B            428             mov 0x1b,A
                     429             
                     430             ;restore psw later to stay in register bank 3
00DF E8              431             mov A,r0
00E0 FA              432             mov r2,A   ;r2 now has pointer to value of psw
                     433     ;       mov psw,@r0
00E1 08              434             inc r0
                     435             
                     436             
                     437             ;if process is in status start request make sp manually #7
00E2 E51C            438             mov A,0x1c
00E4 241D            439             add A,#1dh
00E6 B40108          440             cjne A,#statusStartReq,beforeRestoreStack
00E9 758107          441             mov sp,#7       ;set default for sp & change status
00EC 241D            442             add A,#1dh
00EE F9              443             mov r1,A
00EF 7602            444             mov @r0,#statusRunning
                     445             
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 18:22:17 PAGE     5

                     446             
00F1                 447             beforeRestoreStack:
00F1 AC81            448             mov r4,sp
00F3 7907            449             mov r1,#7
00F5 E9              450             mov A,r1
00F6 6C              451             xrl A,r4 ;in case stack didnt grow
00F7 6008            452             jz restoreStackComplete
00F9                 453             restoreStack:
00F9 E6              454                     mov A,@r0
00FA F7              455                     mov @r1,A
00FB 09              456                     inc r1
00FC 08              457                     inc r0
00FD E9              458                     mov A,r1
                     459                     ;check if r1 equals sp
00FE 6C              460                     xrl A,r4
00FF 70F8            461                     jnz restoreStack
                     462             
0101                 463             restoreStackComplete:
                     464             ;push return adress onto stack                          probably not necessary, bec
                             ause stack is saved anyways
0101 E51C            465             mov A,0x1c
0103 23              466             rl  A
0104 2421            467             add A,#21h
0106 F8              468             mov r0,A
                     469             
0107 8618            470             mov 0x18,@r0
0109 08              471             inc r0
010A 8619            472             mov 0x19,@r0
010C C018            473             push 0x18
010E C019            474             push 0x19
                     475             
                     476     ;       mov r0,A
                     477     ;       mov dpl,@r0
                     478     ;       push dpl
                     479     ;       inc r0
                     480     ;       mov dph,@r0
                     481     ;       push dph
                     482             
                     483             ;switch register bank back to 0
0110 EA              484             mov A,r2
0111 F8              485             mov r0,A
0112 86D0            486             mov psw,@r0
0114 E51B            487             mov A,0x1b
                     488     ;       anl psw,#11100111b
0116 32              489             reti
                     490             
0117 8008            491             jmp realend
                     492             
0119                 493     findNextProg:
                     494     ;       cjne r0,statusRunning,
                     495             
0119 32              496             reti
                     497             
011A                 498     endloop:
011A 00              499             nop
011B D2AE            500             setb wdt
011D D2BE            501             setb swdt
011F 80F9            502             jmp endloop
                     503             
0121                 504     realend:        
                     505     
                     506             end
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 18:22:17 PAGE     6

SYMBOL TABLE LISTING
------ ----- -------


N A M E                  T Y P E  V A L U E   ATTRIBUTES

AC. . . . . . . . . . .  B ADDR   00D0H.6 A   
ACC . . . . . . . . . .  D ADDR   00E0H   A   
ADCON0. . . . . . . . .  D ADDR   00D8H   A   
ADCON1. . . . . . . . .  D ADDR   00DCH   A   
ADDATH. . . . . . . . .  D ADDR   00D9H   A   
ADDATL. . . . . . . . .  D ADDR   00DAH   A   
ADEX. . . . . . . . . .  B ADDR   00D8H.5 A   
ADM . . . . . . . . . .  B ADDR   00D8H.3 A   
AFTERCALCULATINGOFFSET.  C ADDR   004AH   R   SEG=SCHEDULERSEGMENT
AFTERCALCULATINGOFFSET2  C ADDR   00B4H   R   SEG=SCHEDULERSEGMENT
ARCON . . . . . . . . .  D ADDR   00EFH   A   
B . . . . . . . . . . .  D ADDR   00F0H   A   
BD. . . . . . . . . . .  B ADDR   00D8H.7 A   
BEFORERESTORESTACK. . .  C ADDR   00F1H   R   SEG=SCHEDULERSEGMENT
BSY . . . . . . . . . .  B ADDR   00D8H.4 A   
CC4EN . . . . . . . . .  D ADDR   00C9H   A   
CCEN. . . . . . . . . .  D ADDR   00C1H   A   
CCH1. . . . . . . . . .  D ADDR   00C3H   A   
CCH2. . . . . . . . . .  D ADDR   00C5H   A   
CCH3. . . . . . . . . .  D ADDR   00C7H   A   
CCH4. . . . . . . . . .  D ADDR   00CFH   A   
CCL1. . . . . . . . . .  D ADDR   00C2H   A   
CCL2. . . . . . . . . .  D ADDR   00C4H   A   
CCL3. . . . . . . . . .  D ADDR   00C6H   A   
CCL4. . . . . . . . . .  D ADDR   00CEH   A   
CLK . . . . . . . . . .  B ADDR   00D8H.6 A   
CLRMSK. . . . . . . . .  D ADDR   00A6H   A   
CMEN. . . . . . . . . .  D ADDR   00F6H   A   
CMH0. . . . . . . . . .  D ADDR   00D3H   A   
CMH1. . . . . . . . . .  D ADDR   00D5H   A   
CMH2. . . . . . . . . .  D ADDR   00D7H   A   
CMH3. . . . . . . . . .  D ADDR   00E3H   A   
CMH4. . . . . . . . . .  D ADDR   00E5H   A   
CMH5. . . . . . . . . .  D ADDR   00E7H   A   
CMH6. . . . . . . . . .  D ADDR   00F3H   A   
CMH7. . . . . . . . . .  D ADDR   00F5H   A   
CML0. . . . . . . . . .  D ADDR   00D2H   A   
CML1. . . . . . . . . .  D ADDR   00D4H   A   
CML2. . . . . . . . . .  D ADDR   00D6H   A   
CML3. . . . . . . . . .  D ADDR   00E2H   A   
CML4. . . . . . . . . .  D ADDR   00E4H   A   
CML5. . . . . . . . . .  D ADDR   00E6H   A   
CML6. . . . . . . . . .  D ADDR   00F2H   A   
CML7. . . . . . . . . .  D ADDR   00F4H   A   
CMSEL . . . . . . . . .  D ADDR   00F7H   A   
COMCLRH . . . . . . . .  D ADDR   00A4H   A   
COMCLRL . . . . . . . .  D ADDR   00A3H   A   
COMSETH . . . . . . . .  D ADDR   00A2H   A   
COMSETL . . . . . . . .  D ADDR   00A1H   A   
CONSOLEPROCESS. . . . .  C ADDR   -----       EXT
CRCH. . . . . . . . . .  D ADDR   00CBH   A   
CRCL. . . . . . . . . .  D ADDR   00CAH   A   
CTCON . . . . . . . . .  D ADDR   00E1H   A   
CTRELH. . . . . . . . .  D ADDR   00DFH   A   
CTRELL. . . . . . . . .  D ADDR   00DEH   A   
CY. . . . . . . . . . .  B ADDR   00D0H.7 A   
DPH . . . . . . . . . .  D ADDR   0083H   A   
DPL . . . . . . . . . .  D ADDR   0082H   A   
DPSEL . . . . . . . . .  D ADDR   0092H   A   
EADC. . . . . . . . . .  B ADDR   00B8H.0 A   
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 18:22:17 PAGE     7

EAL . . . . . . . . . .  B ADDR   00A8H.7 A   
ENDLOOP . . . . . . . .  C ADDR   011AH   R   SEG=SCHEDULERSEGMENT
ES. . . . . . . . . . .  B ADDR   00A8H.4 A   
ET0 . . . . . . . . . .  B ADDR   00A8H.1 A   
ET1 . . . . . . . . . .  B ADDR   00A8H.3 A   
ET2 . . . . . . . . . .  B ADDR   00A8H.5 A   
EX0 . . . . . . . . . .  B ADDR   00A8H.0 A   
EX1 . . . . . . . . . .  B ADDR   00A8H.2 A   
EX2 . . . . . . . . . .  B ADDR   00B8H.1 A   
EX3 . . . . . . . . . .  B ADDR   00B8H.2 A   
EX4 . . . . . . . . . .  B ADDR   00B8H.3 A   
EX5 . . . . . . . . . .  B ADDR   00B8H.4 A   
EX6 . . . . . . . . . .  B ADDR   00B8H.5 A   
EXEN2 . . . . . . . . .  B ADDR   00B8H.7 A   
EXF2. . . . . . . . . .  B ADDR   00C0H.7 A   
F0. . . . . . . . . . .  B ADDR   00D0H.5 A   
F1. . . . . . . . . . .  B ADDR   00D0H.1 A   
FINDNEXTPROCESS . . . .  C ADDR   0084H   R   SEG=SCHEDULERSEGMENT
FINDNEXTPROG. . . . . .  C ADDR   0119H   R   SEG=SCHEDULERSEGMENT
I2FR. . . . . . . . . .  B ADDR   00C8H.5 A   
I3FR. . . . . . . . . .  B ADDR   00C8H.6 A   
IADC. . . . . . . . . .  B ADDR   00C0H.0 A   
IE0 . . . . . . . . . .  B ADDR   0088H.1 A   
IE1 . . . . . . . . . .  B ADDR   0088H.3 A   
IEN0. . . . . . . . . .  D ADDR   00A8H   A   
IEN1. . . . . . . . . .  D ADDR   00B8H   A   
IEN2. . . . . . . . . .  D ADDR   009AH   A   
IEX2. . . . . . . . . .  B ADDR   00C0H.1 A   
IEX3. . . . . . . . . .  B ADDR   00C0H.2 A   
IEX4. . . . . . . . . .  B ADDR   00C0H.3 A   
IEX5. . . . . . . . . .  B ADDR   00C0H.4 A   
IEX6. . . . . . . . . .  B ADDR   00C0H.5 A   
INT0. . . . . . . . . .  B ADDR   00B0H.2 A   
INT1. . . . . . . . . .  B ADDR   00B0H.3 A   
IP0 . . . . . . . . . .  D ADDR   00A9H   A   
IP1 . . . . . . . . . .  D ADDR   00B9H   A   
IRCON . . . . . . . . .  D ADDR   00C0H   A   
IRCON1. . . . . . . . .  D ADDR   00D1H   A   
IS1OR2. . . . . . . . .  C ADDR   003AH   R   SEG=SCHEDULERSEGMENT
IS1OR2V2. . . . . . . .  C ADDR   00A4H   R   SEG=SCHEDULERSEGMENT
IS2OR3. . . . . . . . .  C ADDR   0041H   R   SEG=SCHEDULERSEGMENT
IS2OR3V2. . . . . . . .  C ADDR   00ABH   R   SEG=SCHEDULERSEGMENT
IS3 . . . . . . . . . .  C ADDR   0048H   R   SEG=SCHEDULERSEGMENT
IS3V2 . . . . . . . . .  C ADDR   00B2H   R   SEG=SCHEDULERSEGMENT
IT0 . . . . . . . . . .  B ADDR   0088H.0 A   
IT1 . . . . . . . . . .  B ADDR   0088H.2 A   
JUSTSKIPTHELINEBEFORE .  C ADDR   008BH   R   SEG=SCHEDULERSEGMENT
MD0 . . . . . . . . . .  D ADDR   00E9H   A   
MD1 . . . . . . . . . .  D ADDR   00EAH   A   
MD2 . . . . . . . . . .  D ADDR   00EBH   A   
MD3 . . . . . . . . . .  D ADDR   00ECH   A   
MD4 . . . . . . . . . .  D ADDR   00EDH   A   
MD5 . . . . . . . . . .  D ADDR   00EEH   A   
MX0 . . . . . . . . . .  B ADDR   00D8H.0 A   
MX1 . . . . . . . . . .  B ADDR   00D8H.1 A   
MX2 . . . . . . . . . .  B ADDR   00D8H.2 A   
OV. . . . . . . . . . .  B ADDR   00D0H.2 A   
P . . . . . . . . . . .  B ADDR   00D0H.0 A   
P0. . . . . . . . . . .  D ADDR   0080H   A   
P1. . . . . . . . . . .  D ADDR   0090H   A   
P2. . . . . . . . . . .  D ADDR   00A0H   A   
P3. . . . . . . . . . .  D ADDR   00B0H   A   
P4. . . . . . . . . . .  D ADDR   00E8H   A   
P5. . . . . . . . . . .  D ADDR   00F8H   A   
P6. . . . . . . . . . .  D ADDR   00FAH   A   
P7. . . . . . . . . . .  D ADDR   00DBH   A   
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 18:22:17 PAGE     8

P8. . . . . . . . . . .  D ADDR   00DDH   A   
PCON. . . . . . . . . .  D ADDR   0087H   A   
PSW . . . . . . . . . .  D ADDR   00D0H   A   
RB80. . . . . . . . . .  B ADDR   0098H.2 A   
RD. . . . . . . . . . .  B ADDR   00B0H.7 A   
REALEND . . . . . . . .  C ADDR   0121H   R   SEG=SCHEDULERSEGMENT
REN0. . . . . . . . . .  B ADDR   0098H.4 A   
RESTORESTACK. . . . . .  C ADDR   00F9H   R   SEG=SCHEDULERSEGMENT
RESTORESTACKCOMPLETE. .  C ADDR   0101H   R   SEG=SCHEDULERSEGMENT
RI0 . . . . . . . . . .  B ADDR   0098H.0 A   
RS0 . . . . . . . . . .  B ADDR   00D0H.3 A   
RS1 . . . . . . . . . .  B ADDR   00D0H.4 A   
RXD . . . . . . . . . .  B ADDR   00B0H.0 A   
S0BUF . . . . . . . . .  D ADDR   0099H   A   
S0CON . . . . . . . . .  D ADDR   0098H   A   
S0RELH. . . . . . . . .  D ADDR   00BAH   A   
S0RELL. . . . . . . . .  D ADDR   00AAH   A   
S1BUF . . . . . . . . .  D ADDR   009CH   A   
S1CON . . . . . . . . .  D ADDR   009BH   A   
S1RELH. . . . . . . . .  D ADDR   00BBH   A   
S1RELL. . . . . . . . .  D ADDR   009DH   A   
SAVESTACK . . . . . . .  C ADDR   007CH   R   SEG=SCHEDULERSEGMENT
SCHEDULER . . . . . . .  C ADDR   0000H   R   SEG=SCHEDULERSEGMENT
SCHEDULERSEGMENT. . . .  C SEG    0121H       REL=UNIT
SETMSK. . . . . . . . .  D ADDR   00A5H   A   
SM0 . . . . . . . . . .  B ADDR   0098H.7 A   
SM1 . . . . . . . . . .  B ADDR   0098H.6 A   
SM20. . . . . . . . . .  B ADDR   0098H.5 A   
SP. . . . . . . . . . .  D ADDR   0081H   A   
STATUSNOTRUNNING. . . .  N NUMB   0000H   A   
STATUSRUNNING . . . . .  N NUMB   0002H   A   
STATUSSTARTREQ. . . . .  N NUMB   0001H   A   
SWDT. . . . . . . . . .  B ADDR   00B8H.6 A   
SYSCON. . . . . . . . .  D ADDR   00B1H   A   
T0. . . . . . . . . . .  B ADDR   00B0H.4 A   
T1. . . . . . . . . . .  B ADDR   00B0H.5 A   
T2CM. . . . . . . . . .  B ADDR   00C8H.2 A   
T2CON . . . . . . . . .  D ADDR   00C8H   A   
T2I0. . . . . . . . . .  B ADDR   00C8H.0 A   
T2I1. . . . . . . . . .  B ADDR   00C8H.1 A   
T2PS. . . . . . . . . .  B ADDR   00C8H.7 A   
T2R0. . . . . . . . . .  B ADDR   00C8H.3 A   
T2R1. . . . . . . . . .  B ADDR   00C8H.4 A   
TB80. . . . . . . . . .  B ADDR   0098H.3 A   
TCON. . . . . . . . . .  D ADDR   0088H   A   
TF0 . . . . . . . . . .  B ADDR   0088H.5 A   
TF1 . . . . . . . . . .  B ADDR   0088H.7 A   
TF2 . . . . . . . . . .  B ADDR   00C0H.6 A   
TH0 . . . . . . . . . .  D ADDR   008CH   A   
TH1 . . . . . . . . . .  D ADDR   008DH   A   
TH2 . . . . . . . . . .  D ADDR   00CDH   A   
TI0 . . . . . . . . . .  B ADDR   0098H.1 A   
TIHANDLER . . . . . . .  C ADDR   001BH   R   SEG=SCHEDULERSEGMENT
TL0 . . . . . . . . . .  D ADDR   008AH   A   
TL1 . . . . . . . . . .  D ADDR   008BH   A   
TL2 . . . . . . . . . .  D ADDR   00CCH   A   
TMOD. . . . . . . . . .  D ADDR   0089H   A   
TR0 . . . . . . . . . .  B ADDR   0088H.4 A   
TR1 . . . . . . . . . .  B ADDR   0088H.6 A   
TXD . . . . . . . . . .  B ADDR   00B0H.1 A   
WDT . . . . . . . . . .  B ADDR   00A8H.6 A   
WDTH. . . . . . . . . .  D ADDR   0085H   A   
WDTL. . . . . . . . . .  D ADDR   0084H   A   
WDTREL. . . . . . . . .  D ADDR   0086H   A   
WR. . . . . . . . . . .  B ADDR   00B0H.6 A   
XPAGE . . . . . . . . .  D ADDR   0091H   A   
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 18:22:17 PAGE     9



REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
