A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 20:28:38 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\scheduler.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE scheduler.a51 SET(SMALL) DEBUG PRINT(.\Listings\scheduler.lst) OBJECT(.
                      \Objects\scheduler.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     $nomod51 
                       2     ;#include <Reg517a.inc>
                +1     3     ;-------------------------------------------------------------------------------
                +1     4     ; Copyright 1995-1996 KEIL Software, Inc.
                +1     5     ; 80517A Processor Declarations
                +1     6     ;-------------------------------------------------------------------------------
                +1     7  +1 $save 
                +1   199  +1 $restore 
                +1   200     
                     201     
                     202     
                     203     NAME scheduler
                     204     PUBLIC scheduler
                     205             
                     206     EXTRN CODE(consoleProcess)      
                     207             
                     208             ;define timer2 interupt routine
----                 209             cseg at 001bh
001B 020000   F      210             jmp tihandler   
                     211             
                     212     schedulerSegment SEGMENT CODE
                     213             ; switch to the created relocatable segment
----                 214             RSEG schedulerSegment
                     215             
0000                 216     scheduler:
                     217             ;define process status values
  0000               218             statusNotRunning equ 0
  0001               219             statusStartReq equ 1
  0002               220             statusRunning equ 2
                     221             
                     222             ;start
0000                 223             org 0000h
                     224                     
0000 900000   F      225             mov dptr,#consoleProcess
0003 858221          226             mov 0x21,dpl
0006 858322          227             mov 0x22,dph
                     228             
                     229             ;enable all interrupts
0009 D2AF            230             setb eal
000B 758D00          231             mov th1,#0
000E 758B00          232             mov tl1,#0
                     233             
                     234             ;enable and start timer 1
0011 D2AB            235             setb et1
0013 D28E            236             setb tr1
                     237             
                     238             ;start console process DELETE THIS
0015 120000   F      239             call consoleProcess
0018 020000   F      240             jmp endloop
                     241             
                     242             
001B                 243     tihandler:
                     244             ;do scheduelr stuff here
                     245             
                     246             ;save old adress
                     247             ;put accu & r0 in save space to do some basic calc
001B 881A            248             mov 0x1a,r0
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 20:28:38 PAGE     2

001D F51B            249             mov 0x1b,A
                     250             
                     251             ;check priorites
001F E51C            252             mov A,0x1c
0021 6400            253             xrl A,#0
0023 6012            254             jz prioCons
0025 E51C            255             mov A,0x1c
0027 6401            256             xrl A,#1
0029 601C            257             jz prioA
002B E51C            258             mov A,0x1c
002D 6402            259             xrl A,#2
002F 6026            260             jz prioB
0031 E51C            261             mov A,0x1c
0033 6403            262             xrl A,#3
0035 6030            263             jz prioZ
                     264             
0037                 265             prioCons:
0037 E591            266                     mov A,0x91
0039 7005            267                     jnz decPrioCons
003B 859091          268                     mov 0x91,0x90
003E 803C            269                     jmp changeProcess
0040                 270                     decPrioCons:
0040 E591            271                             mov A,0x91
0042 14              272                             dec A
0043 F591            273                             mov 0x91,A
0045 8030            274                             jmp returnToProcess
0047                 275             prioA:
0047 E593            276                     mov A,0x93
0049 7005            277                     jnz decPrioA
004B 859293          278                     mov 0x93,0x92
004E 802C            279                     jmp changeProcess
0050                 280                     decPrioA:
0050 E593            281                             mov A,0x93
0052 14              282                             dec A
0053 F593            283                             mov 0x93,A
0055 8020            284                             jmp returnToProcess
0057                 285             prioB:
0057 E595            286                     mov A,0x95
0059 7005            287                     jnz decPrioB
005B 859495          288                     mov 0x95,0x94
005E 801C            289                     jmp changeProcess
0060                 290                     decPrioB:
0060 E595            291                             mov A,0x95
0062 14              292                             dec A
0063 F595            293                             mov 0x95,A
0065 8010            294                             jmp returnToProcess
                     295                     
0067                 296             prioZ:
0067 E597            297                     mov A,0x97
0069 7005            298                     jnz decPrioZ
006B 859697          299                     mov 0x97,0x96
006E 800C            300                     jmp changeProcess
0070                 301                     decPrioZ:
0070 E597            302                             mov A,0x97
0072 14              303                             dec A
0073 F597            304                             mov 0x97,A
0075 8000            305                             jmp returnToProcess
                     306                     
                     307             
0077                 308             returnToProcess:
0077 A81A            309                     mov r0,0x1a
0079 E51B            310                     mov a,0x1b
007B 32              311                     reti
                     312             
007C                 313             changeProcess:
                     314             ;reset priority
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 20:28:38 PAGE     3

007C 18              315             dec r0
007D E6              316             mov A,@r0
007E 08              317             inc r0
007F F6              318             mov @r0,A
                     319             
                     320             
                     321             ;save next adress of interruped process
                     322             ;find next adress space for the process
0080 E51C            323             mov A,0x1c      ;moves process id in a
0082 23              324             rl      A               ;quick multiply A by two, because adress is 2 bits long
0083 2421            325             add A,#21h      ;add offset to beginning of next adress area
                     326             
                     327     ;       ;move adress from stack to calculated adress                                    don
                             t save return adress, cuz we save whole stack afterwards
0085 F8              328             mov r0,A
                     329             ;first pop high
0086 08              330             inc r0
0087 D0E0            331             pop ACC
0089 F6              332             mov @r0,A
                     333             ;then low
008A 18              334             dec r0
008B D0E0            335             pop ACC
008D F6              336             mov @r0,A
                     337             
                     338             ;save rest of context
008E E51C            339             mov A,0x1c
0090 A81C            340             mov r0,0x1c
                     341             
                     342             ;calculate offset in register safe (id * size of one register store[32])
0092 23              343             rl A
0093 23              344             rl A
0094 23              345             rl A
0095 23              346             rl A
                     347             ;adding stack size
0096 B80002          348             cjne r0,#0,is1or2
0099 8010            349             jmp afterCalculatingOffset
009B                 350             is1or2:
009B 2408            351                     add A,#8
009D B80102          352                     cjne r0,#1,is2or3
00A0 8009            353                     jmp afterCalculatingOffset
00A2                 354                     is2or3:
00A2 2408            355                     add A,#8
00A4 B80202          356                     cjne r0,#2,is3
00A7 8002            357                     jmp afterCalculatingOffset
00A9                 358                     is3:
00A9 2408            359                     add A,#8
                     360             
                     361     
                     362     
00AB                 363             afterCalculatingOffset: 
                     364             ;add start adress of register safe
00AB 2429            365             add A,#29h
00AD F8              366             mov r0,A
                     367             
                     368             ;actually save registers
00AE A61A            369             mov @r0,0x1a ;r0 from register save space
00B0 08              370             inc r0
00B1 A601            371             mov @r0,1
00B3 08              372             inc r0
00B4 A602            373             mov @r0,2
00B6 08              374             inc r0
00B7 A603            375             mov @r0,3
00B9 08              376             inc r0
00BA A604            377             mov @r0,4
00BC 08              378             inc r0
00BD A605            379             mov @r0,5
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 20:28:38 PAGE     4

00BF 08              380             inc r0
00C0 A606            381             mov @r0,6
00C2 08              382             inc r0
00C3 A607            383             mov @r0,7
00C5 08              384             inc r0
00C6 A61B            385             mov @r0,0x1b ;reg A from save space
00C8 08              386             inc r0
00C9 A6F0            387             mov @r0,b
00CB 08              388             inc r0
00CC A681            389             mov @r0,SP
00CE 08              390             inc r0
00CF A682            391             mov @r0,dpl
00D1 08              392             inc r0
00D2 A683            393             mov @r0,dph
00D4 08              394             inc r0
00D5 A6D0            395             mov @r0,psw
00D7 08              396             inc r0
                     397             ;save stack
00D8 7907            398             mov r1,#7
00DA AA81            399             mov r2,SP
00DC 0A              400             inc r2
00DD                 401             saveStack:      
00DD E7              402                     mov A,@r1
00DE F6              403                     mov @r0,A
00DF 09              404                     inc r1
00E0 08              405                     inc r0
00E1 E9              406                     mov A,r1
00E2 6A              407                     xrl A,r2 ;to act like compare equal
00E3 70F8            408                     jnz saveStack
                     409             
                     410     
                     411             
00E5                 412             findNextProcess:
                     413                     ;find next program to execute
00E5 E51C            414                     mov A,0x1c
00E7 04              415                     inc A
                     416                     
                     417                     ;build modulo 3 (making 0 if its 3)
00E8 B40401          418                     cjne A,#4,justSkipTheLineBefore
00EB E4              419                     clr A
                     420                     
00EC                 421                     justSkipTheLineBefore:
                     422                     ;save new current process
00EC F51C            423                     mov 0x1c,A
                     424                     
                     425                     ;check if started
00EE 241D            426                     add A,#1dh
00F0 F8              427                     mov r0,A
00F1 E6              428                     mov A,@r0
00F2 6400            429                     xrl A,#statusNotRunning
00F4 60EF            430                     jz findNextProcess
                     431     ;               mov r0,A
                     432     ;               cjne @r0,#statusRunning,findNextProcess
                     433             
                     434             ;load context of next process   
                     435             ;calc context adress
                     436             ;switch register bank to 2
00F6 43D010          437             orl psw,#00010000b
                     438     ;       mov A,0x58
                     439     ;       rl  A
                     440     ;       add A,#5ch
                     441     ;       mov r0,A
                     442             
                     443             ;get start adress of saved context
00F9 E51C            444             mov A,0x1c
00FB F8              445             mov r0,A
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 20:28:38 PAGE     5

00FC 23              446             rl A
00FD 23              447             rl A
00FE 23              448             rl A
00FF 23              449             rl A
0100 B80002          450             cjne r0,#0,is1or2v2
0103 8010            451             jmp afterCalculatingOffset2
0105                 452             is1or2v2:
0105 2408            453                     add A,#8
0107 B80102          454                     cjne r0,#1,is2or3v2
010A 8009            455                     jmp afterCalculatingOffset2
010C                 456                     is2or3v2:
010C 2408            457                     add A,#8
010E B80202          458                     cjne r0,#2,is3v2
0111 8002            459                     jmp afterCalculatingOffset2
0113                 460                     is3v2:
0113 2408            461                     add A,#8
                     462             
                     463     
                     464     
0115                 465             afterCalculatingOffset2:        
0115 2429            466             add A,#29h
0117 F8              467             mov r0,A
                     468             
                     469             ;restore registers
0118 8600            470             mov 0,@r0
011A 08              471             inc r0
011B 8601            472             mov 1,@r0
011D 08              473             inc r0
011E 8602            474             mov 2,@r0
0120 08              475             inc r0
0121 8603            476             mov 3,@r0
0123 08              477             inc r0
0124 8604            478             mov 4,@r0
0126 08              479             inc r0
0127 8605            480             mov 5,@r0
0129 08              481             inc r0
012A 8606            482             mov 6,@r0
012C 08              483             inc r0
012D 8607            484             mov 7,@r0
012F 08              485             inc r0
0130 E6              486             mov A,@r0
0131 08              487             inc r0
0132 86F0            488             mov b,@r0
0134 08              489             inc r0
0135 8681            490             mov sp,@r0
0137 08              491             inc r0
0138 8682            492             mov dpl,@r0
013A 08              493             inc r0
013B 8683            494             mov dph,@r0
013D 08              495             inc r0
                     496             
                     497             ;resave A,0
013E F51B            498             mov 0x1b,A
                     499             
                     500             ;restore psw later to stay in register bank 3
0140 E8              501             mov A,r0
0141 FA              502             mov r2,A   ;r2 now has pointer to value of psw
                     503     ;       mov psw,@r0
0142 08              504             inc r0
                     505             
                     506             
                     507             ;if process is in status start request make sp manually #7
0143 E51C            508             mov A,0x1c
0145 241D            509             add A,#1dh
0147 B40108          510             cjne A,#statusStartReq,beforeRestoreStack
014A 758107          511             mov sp,#7       ;set default for sp & change status
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 20:28:38 PAGE     6

014D 241D            512             add A,#1dh
014F F9              513             mov r1,A
0150 7602            514             mov @r0,#statusRunning
                     515             
                     516             
0152                 517             beforeRestoreStack:
0152 AC81            518             mov r4,sp
0154 7907            519             mov r1,#7
0156 E9              520             mov A,r1
0157 6C              521             xrl A,r4 ;in case stack didnt grow
0158 6008            522             jz restoreStackComplete
015A                 523             restoreStack:
015A E6              524                     mov A,@r0
015B F7              525                     mov @r1,A
015C 09              526                     inc r1
015D 08              527                     inc r0
015E E9              528                     mov A,r1
                     529                     ;check if r1 equals sp
015F 6C              530                     xrl A,r4
0160 70F8            531                     jnz restoreStack
                     532             
0162                 533             restoreStackComplete:
                     534             ;push return adress onto stack                          
0162 E51C            535             mov A,0x1c
0164 23              536             rl  A
0165 2421            537             add A,#21h
0167 F8              538             mov r0,A
                     539             
0168 8618            540             mov 0x18,@r0
016A 08              541             inc r0
016B 8619            542             mov 0x19,@r0
016D C018            543             push 0x18
016F C019            544             push 0x19
                     545             
                     546             
                     547             ;switch register bank back to 0
0171 EA              548             mov A,r2
0172 F8              549             mov r0,A
0173 86D0            550             mov psw,@r0
0175 E51B            551             mov A,0x1b
                     552     ;       anl psw,#11100111b
0177 32              553             reti
                     554             
0178 8007            555             jmp realend
                     556             
017A                 557     endloop:
017A 00              558             nop
017B D2AE            559             setb wdt
017D D2BE            560             setb swdt
017F 80F9            561             jmp endloop
                     562             
0181                 563     realend:        
                     564     
                     565             end
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 20:28:38 PAGE     7

SYMBOL TABLE LISTING
------ ----- -------


N A M E                  T Y P E  V A L U E   ATTRIBUTES

AC. . . . . . . . . . .  B ADDR   00D0H.6 A   
ACC . . . . . . . . . .  D ADDR   00E0H   A   
ADCON0. . . . . . . . .  D ADDR   00D8H   A   
ADCON1. . . . . . . . .  D ADDR   00DCH   A   
ADDATH. . . . . . . . .  D ADDR   00D9H   A   
ADDATL. . . . . . . . .  D ADDR   00DAH   A   
ADEX. . . . . . . . . .  B ADDR   00D8H.5 A   
ADM . . . . . . . . . .  B ADDR   00D8H.3 A   
AFTERCALCULATINGOFFSET.  C ADDR   00ABH   R   SEG=SCHEDULERSEGMENT
AFTERCALCULATINGOFFSET2  C ADDR   0115H   R   SEG=SCHEDULERSEGMENT
ARCON . . . . . . . . .  D ADDR   00EFH   A   
B . . . . . . . . . . .  D ADDR   00F0H   A   
BD. . . . . . . . . . .  B ADDR   00D8H.7 A   
BEFORERESTORESTACK. . .  C ADDR   0152H   R   SEG=SCHEDULERSEGMENT
BSY . . . . . . . . . .  B ADDR   00D8H.4 A   
CC4EN . . . . . . . . .  D ADDR   00C9H   A   
CCEN. . . . . . . . . .  D ADDR   00C1H   A   
CCH1. . . . . . . . . .  D ADDR   00C3H   A   
CCH2. . . . . . . . . .  D ADDR   00C5H   A   
CCH3. . . . . . . . . .  D ADDR   00C7H   A   
CCH4. . . . . . . . . .  D ADDR   00CFH   A   
CCL1. . . . . . . . . .  D ADDR   00C2H   A   
CCL2. . . . . . . . . .  D ADDR   00C4H   A   
CCL3. . . . . . . . . .  D ADDR   00C6H   A   
CCL4. . . . . . . . . .  D ADDR   00CEH   A   
CHANGEPROCESS . . . . .  C ADDR   007CH   R   SEG=SCHEDULERSEGMENT
CLK . . . . . . . . . .  B ADDR   00D8H.6 A   
CLRMSK. . . . . . . . .  D ADDR   00A6H   A   
CMEN. . . . . . . . . .  D ADDR   00F6H   A   
CMH0. . . . . . . . . .  D ADDR   00D3H   A   
CMH1. . . . . . . . . .  D ADDR   00D5H   A   
CMH2. . . . . . . . . .  D ADDR   00D7H   A   
CMH3. . . . . . . . . .  D ADDR   00E3H   A   
CMH4. . . . . . . . . .  D ADDR   00E5H   A   
CMH5. . . . . . . . . .  D ADDR   00E7H   A   
CMH6. . . . . . . . . .  D ADDR   00F3H   A   
CMH7. . . . . . . . . .  D ADDR   00F5H   A   
CML0. . . . . . . . . .  D ADDR   00D2H   A   
CML1. . . . . . . . . .  D ADDR   00D4H   A   
CML2. . . . . . . . . .  D ADDR   00D6H   A   
CML3. . . . . . . . . .  D ADDR   00E2H   A   
CML4. . . . . . . . . .  D ADDR   00E4H   A   
CML5. . . . . . . . . .  D ADDR   00E6H   A   
CML6. . . . . . . . . .  D ADDR   00F2H   A   
CML7. . . . . . . . . .  D ADDR   00F4H   A   
CMSEL . . . . . . . . .  D ADDR   00F7H   A   
COMCLRH . . . . . . . .  D ADDR   00A4H   A   
COMCLRL . . . . . . . .  D ADDR   00A3H   A   
COMSETH . . . . . . . .  D ADDR   00A2H   A   
COMSETL . . . . . . . .  D ADDR   00A1H   A   
CONSOLEPROCESS. . . . .  C ADDR   -----       EXT
CRCH. . . . . . . . . .  D ADDR   00CBH   A   
CRCL. . . . . . . . . .  D ADDR   00CAH   A   
CTCON . . . . . . . . .  D ADDR   00E1H   A   
CTRELH. . . . . . . . .  D ADDR   00DFH   A   
CTRELL. . . . . . . . .  D ADDR   00DEH   A   
CY. . . . . . . . . . .  B ADDR   00D0H.7 A   
DECPRIOA. . . . . . . .  C ADDR   0050H   R   SEG=SCHEDULERSEGMENT
DECPRIOB. . . . . . . .  C ADDR   0060H   R   SEG=SCHEDULERSEGMENT
DECPRIOCONS . . . . . .  C ADDR   0040H   R   SEG=SCHEDULERSEGMENT
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 20:28:38 PAGE     8

DECPRIOZ. . . . . . . .  C ADDR   0070H   R   SEG=SCHEDULERSEGMENT
DPH . . . . . . . . . .  D ADDR   0083H   A   
DPL . . . . . . . . . .  D ADDR   0082H   A   
DPSEL . . . . . . . . .  D ADDR   0092H   A   
EADC. . . . . . . . . .  B ADDR   00B8H.0 A   
EAL . . . . . . . . . .  B ADDR   00A8H.7 A   
ENDLOOP . . . . . . . .  C ADDR   017AH   R   SEG=SCHEDULERSEGMENT
ES. . . . . . . . . . .  B ADDR   00A8H.4 A   
ET0 . . . . . . . . . .  B ADDR   00A8H.1 A   
ET1 . . . . . . . . . .  B ADDR   00A8H.3 A   
ET2 . . . . . . . . . .  B ADDR   00A8H.5 A   
EX0 . . . . . . . . . .  B ADDR   00A8H.0 A   
EX1 . . . . . . . . . .  B ADDR   00A8H.2 A   
EX2 . . . . . . . . . .  B ADDR   00B8H.1 A   
EX3 . . . . . . . . . .  B ADDR   00B8H.2 A   
EX4 . . . . . . . . . .  B ADDR   00B8H.3 A   
EX5 . . . . . . . . . .  B ADDR   00B8H.4 A   
EX6 . . . . . . . . . .  B ADDR   00B8H.5 A   
EXEN2 . . . . . . . . .  B ADDR   00B8H.7 A   
EXF2. . . . . . . . . .  B ADDR   00C0H.7 A   
F0. . . . . . . . . . .  B ADDR   00D0H.5 A   
F1. . . . . . . . . . .  B ADDR   00D0H.1 A   
FINDNEXTPROCESS . . . .  C ADDR   00E5H   R   SEG=SCHEDULERSEGMENT
I2FR. . . . . . . . . .  B ADDR   00C8H.5 A   
I3FR. . . . . . . . . .  B ADDR   00C8H.6 A   
IADC. . . . . . . . . .  B ADDR   00C0H.0 A   
IE0 . . . . . . . . . .  B ADDR   0088H.1 A   
IE1 . . . . . . . . . .  B ADDR   0088H.3 A   
IEN0. . . . . . . . . .  D ADDR   00A8H   A   
IEN1. . . . . . . . . .  D ADDR   00B8H   A   
IEN2. . . . . . . . . .  D ADDR   009AH   A   
IEX2. . . . . . . . . .  B ADDR   00C0H.1 A   
IEX3. . . . . . . . . .  B ADDR   00C0H.2 A   
IEX4. . . . . . . . . .  B ADDR   00C0H.3 A   
IEX5. . . . . . . . . .  B ADDR   00C0H.4 A   
IEX6. . . . . . . . . .  B ADDR   00C0H.5 A   
INT0. . . . . . . . . .  B ADDR   00B0H.2 A   
INT1. . . . . . . . . .  B ADDR   00B0H.3 A   
IP0 . . . . . . . . . .  D ADDR   00A9H   A   
IP1 . . . . . . . . . .  D ADDR   00B9H   A   
IRCON . . . . . . . . .  D ADDR   00C0H   A   
IRCON1. . . . . . . . .  D ADDR   00D1H   A   
IS1OR2. . . . . . . . .  C ADDR   009BH   R   SEG=SCHEDULERSEGMENT
IS1OR2V2. . . . . . . .  C ADDR   0105H   R   SEG=SCHEDULERSEGMENT
IS2OR3. . . . . . . . .  C ADDR   00A2H   R   SEG=SCHEDULERSEGMENT
IS2OR3V2. . . . . . . .  C ADDR   010CH   R   SEG=SCHEDULERSEGMENT
IS3 . . . . . . . . . .  C ADDR   00A9H   R   SEG=SCHEDULERSEGMENT
IS3V2 . . . . . . . . .  C ADDR   0113H   R   SEG=SCHEDULERSEGMENT
IT0 . . . . . . . . . .  B ADDR   0088H.0 A   
IT1 . . . . . . . . . .  B ADDR   0088H.2 A   
JUSTSKIPTHELINEBEFORE .  C ADDR   00ECH   R   SEG=SCHEDULERSEGMENT
MD0 . . . . . . . . . .  D ADDR   00E9H   A   
MD1 . . . . . . . . . .  D ADDR   00EAH   A   
MD2 . . . . . . . . . .  D ADDR   00EBH   A   
MD3 . . . . . . . . . .  D ADDR   00ECH   A   
MD4 . . . . . . . . . .  D ADDR   00EDH   A   
MD5 . . . . . . . . . .  D ADDR   00EEH   A   
MX0 . . . . . . . . . .  B ADDR   00D8H.0 A   
MX1 . . . . . . . . . .  B ADDR   00D8H.1 A   
MX2 . . . . . . . . . .  B ADDR   00D8H.2 A   
OV. . . . . . . . . . .  B ADDR   00D0H.2 A   
P . . . . . . . . . . .  B ADDR   00D0H.0 A   
P0. . . . . . . . . . .  D ADDR   0080H   A   
P1. . . . . . . . . . .  D ADDR   0090H   A   
P2. . . . . . . . . . .  D ADDR   00A0H   A   
P3. . . . . . . . . . .  D ADDR   00B0H   A   
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 20:28:38 PAGE     9

P4. . . . . . . . . . .  D ADDR   00E8H   A   
P5. . . . . . . . . . .  D ADDR   00F8H   A   
P6. . . . . . . . . . .  D ADDR   00FAH   A   
P7. . . . . . . . . . .  D ADDR   00DBH   A   
P8. . . . . . . . . . .  D ADDR   00DDH   A   
PCON. . . . . . . . . .  D ADDR   0087H   A   
PRIOA . . . . . . . . .  C ADDR   0047H   R   SEG=SCHEDULERSEGMENT
PRIOB . . . . . . . . .  C ADDR   0057H   R   SEG=SCHEDULERSEGMENT
PRIOCONS. . . . . . . .  C ADDR   0037H   R   SEG=SCHEDULERSEGMENT
PRIOZ . . . . . . . . .  C ADDR   0067H   R   SEG=SCHEDULERSEGMENT
PSW . . . . . . . . . .  D ADDR   00D0H   A   
RB80. . . . . . . . . .  B ADDR   0098H.2 A   
RD. . . . . . . . . . .  B ADDR   00B0H.7 A   
REALEND . . . . . . . .  C ADDR   0181H   R   SEG=SCHEDULERSEGMENT
REN0. . . . . . . . . .  B ADDR   0098H.4 A   
RESTORESTACK. . . . . .  C ADDR   015AH   R   SEG=SCHEDULERSEGMENT
RESTORESTACKCOMPLETE. .  C ADDR   0162H   R   SEG=SCHEDULERSEGMENT
RETURNTOPROCESS . . . .  C ADDR   0077H   R   SEG=SCHEDULERSEGMENT
RI0 . . . . . . . . . .  B ADDR   0098H.0 A   
RS0 . . . . . . . . . .  B ADDR   00D0H.3 A   
RS1 . . . . . . . . . .  B ADDR   00D0H.4 A   
RXD . . . . . . . . . .  B ADDR   00B0H.0 A   
S0BUF . . . . . . . . .  D ADDR   0099H   A   
S0CON . . . . . . . . .  D ADDR   0098H   A   
S0RELH. . . . . . . . .  D ADDR   00BAH   A   
S0RELL. . . . . . . . .  D ADDR   00AAH   A   
S1BUF . . . . . . . . .  D ADDR   009CH   A   
S1CON . . . . . . . . .  D ADDR   009BH   A   
S1RELH. . . . . . . . .  D ADDR   00BBH   A   
S1RELL. . . . . . . . .  D ADDR   009DH   A   
SAVESTACK . . . . . . .  C ADDR   00DDH   R   SEG=SCHEDULERSEGMENT
SCHEDULER . . . . . . .  C ADDR   0000H   R   SEG=SCHEDULERSEGMENT
SCHEDULERSEGMENT. . . .  C SEG    0181H       REL=UNIT
SETMSK. . . . . . . . .  D ADDR   00A5H   A   
SM0 . . . . . . . . . .  B ADDR   0098H.7 A   
SM1 . . . . . . . . . .  B ADDR   0098H.6 A   
SM20. . . . . . . . . .  B ADDR   0098H.5 A   
SP. . . . . . . . . . .  D ADDR   0081H   A   
STATUSNOTRUNNING. . . .  N NUMB   0000H   A   
STATUSRUNNING . . . . .  N NUMB   0002H   A   
STATUSSTARTREQ. . . . .  N NUMB   0001H   A   
SWDT. . . . . . . . . .  B ADDR   00B8H.6 A   
SYSCON. . . . . . . . .  D ADDR   00B1H   A   
T0. . . . . . . . . . .  B ADDR   00B0H.4 A   
T1. . . . . . . . . . .  B ADDR   00B0H.5 A   
T2CM. . . . . . . . . .  B ADDR   00C8H.2 A   
T2CON . . . . . . . . .  D ADDR   00C8H   A   
T2I0. . . . . . . . . .  B ADDR   00C8H.0 A   
T2I1. . . . . . . . . .  B ADDR   00C8H.1 A   
T2PS. . . . . . . . . .  B ADDR   00C8H.7 A   
T2R0. . . . . . . . . .  B ADDR   00C8H.3 A   
T2R1. . . . . . . . . .  B ADDR   00C8H.4 A   
TB80. . . . . . . . . .  B ADDR   0098H.3 A   
TCON. . . . . . . . . .  D ADDR   0088H   A   
TF0 . . . . . . . . . .  B ADDR   0088H.5 A   
TF1 . . . . . . . . . .  B ADDR   0088H.7 A   
TF2 . . . . . . . . . .  B ADDR   00C0H.6 A   
TH0 . . . . . . . . . .  D ADDR   008CH   A   
TH1 . . . . . . . . . .  D ADDR   008DH   A   
TH2 . . . . . . . . . .  D ADDR   00CDH   A   
TI0 . . . . . . . . . .  B ADDR   0098H.1 A   
TIHANDLER . . . . . . .  C ADDR   001BH   R   SEG=SCHEDULERSEGMENT
TL0 . . . . . . . . . .  D ADDR   008AH   A   
TL1 . . . . . . . . . .  D ADDR   008BH   A   
TL2 . . . . . . . . . .  D ADDR   00CCH   A   
TMOD. . . . . . . . . .  D ADDR   0089H   A   
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 20:28:38 PAGE    10

TR0 . . . . . . . . . .  B ADDR   0088H.4 A   
TR1 . . . . . . . . . .  B ADDR   0088H.6 A   
TXD . . . . . . . . . .  B ADDR   00B0H.1 A   
WDT . . . . . . . . . .  B ADDR   00A8H.6 A   
WDTH. . . . . . . . . .  D ADDR   0085H   A   
WDTL. . . . . . . . . .  D ADDR   0084H   A   
WDTREL. . . . . . . . .  D ADDR   0086H   A   
WR. . . . . . . . . . .  B ADDR   00B0H.6 A   
XPAGE . . . . . . . . .  D ADDR   0091H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
