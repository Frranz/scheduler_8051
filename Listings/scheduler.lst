A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 12:39:12 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\scheduler.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE scheduler.a51 SET(SMALL) DEBUG PRINT(.\Listings\scheduler.lst) OBJECT(.
                      \Objects\scheduler.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     $nomod51 
                       2     ;#include <Reg517a.inc>
                +1     3     ;-------------------------------------------------------------------------------
                +1     4     ; Copyright 1995-1996 KEIL Software, Inc.
                +1     5     ; 80517A Processor Declarations
                +1     6     ;-------------------------------------------------------------------------------
                +1     7  +1 $save 
                +1   199  +1 $restore 
                +1   200     
                     201     
                     202     
                     203     NAME scheduler
                     204     PUBLIC scheduler
                     205             
                     206     EXTRN CODE(consoleProcess)      
                     207             
                     208             ;define timer2 interupt routine
----                 209             cseg at 001bh
001B 020000   F      210             jmp tihandler   
                     211             
                     212     schedulerSegment SEGMENT CODE
                     213             ; switch to the created relocatable segment
----                 214             RSEG schedulerSegment
                     215             
0000                 216     scheduler:
                     217             ;define process status values
  0000               218             statusNotRunning equ 0
  0001               219             statusStartReq equ 1
  0002               220             statusRunning equ 2
                     221             
                     222             ;start
0000                 223             org 0000h
                     224                     
0000 900000   F      225             mov dptr,#consoleProcess
0003 85825C          226             mov 0x5c,dpl
0006 85835D          227             mov 0x5d,dph
                     228             
                     229             ;enable all interrupts
0009 D2AF            230             setb eal
000B 758D00          231             mov th1,#0
000E 758B00          232             mov tl1,#0
                     233             
                     234             ;enable and start timer 1
0011 D2AB            235             setb et1
0013 D28E            236             setb tr1
                     237             
                     238             ;start console process DELETE THIS
0015 120000   F      239             call consoleProcess
0018 020000   F      240             jmp endloop
                     241             
                     242             
001B                 243     tihandler:
                     244             ;do scheduelr stuff here
                     245             
                     246             ;save old adress
                     247             ;put accu & r0 in save space to do some basic calc
001B 8856            248             mov 0x56,r0
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 12:39:12 PAGE     2

001D F557            249             mov 0x57,A
                     250             
                     251             ;save next adress of interruped process
                     252             ;find next adress space for the process
001F E558            253             mov A,0x58      ;moves process id in a
0021 23              254             rl      A               ;quick multiply A by two, because adress is 2 bits long
0022 245C            255             add A,#5ch      ;add offset to beginning of next adress area
                     256             
                     257     ;       ;move adress from stack to calculated adress                                    don
                             t save return adress, cuz we save whole stack afterwards
0024 F8              258             mov r0,A
                     259             ;first pop high
0025 08              260             inc r0
0026 D0E0            261             pop ACC
0028 F6              262             mov @r0,A
                     263             ;then low
0029 18              264             dec r0
002A D0E0            265             pop ACC
002C F6              266             mov @r0,A
                     267             
                     268             ;save rest of context
002D E558            269             mov A,0x58
                     270             
                     271             ;calculate offset in register safe (id * size of one register store[32])
002F 23              272             rl A
0030 23              273             rl A
0031 23              274             rl A
0032 23              275             rl A
0033 23              276             rl A
                     277             ;add start adress of register safe
0034 2468            278             add A,#68h
0036 F8              279             mov r0,A
                     280             
                     281             ;actually save registers
0037 A656            282             mov @r0,0x56 ;r0 from register save space
0039 08              283             inc r0
003A A601            284             mov @r0,1
003C 08              285             inc r0
003D A602            286             mov @r0,2
003F 08              287             inc r0
0040 A603            288             mov @r0,3
0042 08              289             inc r0
0043 A604            290             mov @r0,4
0045 08              291             inc r0
0046 A605            292             mov @r0,5
0048 08              293             inc r0
0049 A606            294             mov @r0,6
004B 08              295             inc r0
004C A607            296             mov @r0,7
004E 08              297             inc r0
004F A657            298             mov @r0,0x57 ;reg A from save space
0051 08              299             inc r0
0052 A6F0            300             mov @r0,b
0054 08              301             inc r0
0055 A681            302             mov @r0,SP
0057 08              303             inc r0
0058 A682            304             mov @r0,dpl
005A 08              305             inc r0
005B A683            306             mov @r0,dph
005D 08              307             inc r0
005E A6D0            308             mov @r0,psw
0060 08              309             inc r0
                     310             ;save stack
0061 7907            311             mov r1,#7
0063 AA81            312             mov r2,SP
0065 0A              313             inc r2
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 12:39:12 PAGE     3

0066                 314             saveStack:      
0066 E7              315                     mov A,@r1
0067 F6              316                     mov @r0,A
0068 09              317                     inc r1
0069 08              318                     inc r0
006A E9              319                     mov A,r1
006B 6A              320                     xrl A,r2 ;to act like compare equal
006C 70F8            321                     jnz saveStack
                     322             
                     323     
                     324             
006E                 325             findNextProcess:
                     326                     ;find next program to execute
006E E558            327                     mov A,0x58
0070 04              328                     inc A
                     329                     
                     330                     ;build modulo 3 (making 0 if its 3)
0071 B40301          331                     cjne A,#3,justSkipTheLineBefore
0074 E4              332                     clr A
                     333                     
0075                 334                     justSkipTheLineBefore:
                     335                     ;save new current process
0075 F558            336                     mov 0x58,A
                     337                     
                     338                     ;check if started
0077 2459            339                     add A,#59h
0079 F8              340                     mov r0,A
007A E6              341                     mov A,@r0
007B 6400            342                     xrl A,#statusNotRunning
007D 60EF            343                     jz findNextProcess
                     344     ;               mov r0,A
                     345     ;               cjne @r0,#statusRunning,findNextProcess
                     346             
                     347             ;load context of next process   
                     348             ;calc context adress
                     349             ;switch register bank to 3
007F 43D018          350             orl psw,#00011000b
                     351     ;       mov A,0x58
                     352     ;       rl  A
                     353     ;       add A,#5ch
                     354     ;       mov r0,A
                     355             
                     356             ;get start adress of saved context
0082 E558            357             mov A,0x58
0084 23              358             rl A
0085 23              359             rl A
0086 23              360             rl A
0087 23              361             rl A
0088 23              362             rl A
0089 2468            363             add A,#68h
008B F8              364             mov r0,A
                     365             
                     366             ;restore registers
008C 8600            367             mov 0,@r0
008E 08              368             inc r0
008F 8601            369             mov 1,@r0
0091 08              370             inc r0
0092 8602            371             mov 2,@r0
0094 08              372             inc r0
0095 8603            373             mov 3,@r0
0097 08              374             inc r0
0098 8604            375             mov 4,@r0
009A 08              376             inc r0
009B 8605            377             mov 5,@r0
009D 08              378             inc r0
009E 8606            379             mov 6,@r0
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 12:39:12 PAGE     4

00A0 08              380             inc r0
00A1 8607            381             mov 7,@r0
00A3 08              382             inc r0
00A4 E6              383             mov A,@r0
00A5 08              384             inc r0
00A6 86F0            385             mov b,@r0
00A8 08              386             inc r0
00A9 8681            387             mov sp,@r0
00AB 08              388             inc r0
00AC 8682            389             mov dpl,@r0
00AE 08              390             inc r0
00AF 8683            391             mov dph,@r0
00B1 08              392             inc r0
                     393             
                     394             ;resave A,0
00B2 F557            395             mov 0x57,A
                     396             
                     397             ;restore psw later to stay in register bank 3
00B4 E8              398             mov A,r0
00B5 FA              399             mov r2,A   ;r2 now has pointer to value of psw
                     400     ;       mov psw,@r0
00B6 08              401             inc r0
                     402             
00B7 7907            403             mov r1,#7
                     404             
                     405             ;if process is in status start request make sp manually #7
00B9 E558            406             mov A,0x58
00BB B40103          407             cjne A,#statusStartReq,beforeRestoreStack
00BE 758107          408             mov sp,#7       ;set default for sp
                     409             
                     410             
00C1                 411             beforeRestoreStack:
00C1 AC81            412             mov r4,sp
00C3 E9              413             mov A,r1
00C4 6C              414             xrl A,r4 ;in case stack didnt grow
00C5 6008            415             jz restoreStackComplete
00C7                 416             restoreStack:
00C7 E6              417                     mov A,@r0
00C8 F7              418                     mov @r1,A
00C9 09              419                     inc r1
00CA 08              420                     inc r0
00CB E9              421                     mov A,r1
                     422                     ;check if r1 equals sp
00CC 6C              423                     xrl A,r4
00CD 70F8            424                     jnz restoreStack
                     425             
00CF                 426             restoreStackComplete:
                     427             ;push return adress onto stack                          probably not necessary, bec
                             ause stack is saved anyways
00CF E558            428             mov A,0x58
00D1 23              429             rl  A
00D2 245C            430             add A,#5ch
00D4 F8              431             mov r0,A
                     432             
00D5 8654            433             mov 0x54,@r0
00D7 08              434             inc r0
00D8 8655            435             mov 0x55,@r0
00DA C054            436             push 0x54
00DC C055            437             push 0x55
                     438             
                     439     ;       mov r0,A
                     440     ;       mov dpl,@r0
                     441     ;       push dpl
                     442     ;       inc r0
                     443     ;       mov dph,@r0
                     444     ;       push dph
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 12:39:12 PAGE     5

                     445             
                     446             ;switch register bank back to 0
00DE EA              447             mov A,r2
00DF F8              448             mov r0,A
00E0 86D0            449             mov psw,@r0
00E2 E557            450             mov A,0x57
                     451     ;       anl psw,#11100111b
00E4 32              452             reti
                     453             
00E5 8008            454             jmp realend
                     455             
00E7                 456     findNextProg:
                     457     ;       cjne r0,statusRunning,
                     458             
00E7 32              459             reti
                     460             
00E8                 461     endloop:
00E8 00              462             nop
00E9 D2AE            463             setb wdt
00EB D2BE            464             setb swdt
00ED 80F9            465             jmp endloop
                     466             
00EF                 467     realend:        
                     468     
                     469             end
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 12:39:12 PAGE     6

SYMBOL TABLE LISTING
------ ----- -------


N A M E                T Y P E  V A L U E   ATTRIBUTES

AC. . . . . . . . . .  B ADDR   00D0H.6 A   
ACC . . . . . . . . .  D ADDR   00E0H   A   
ADCON0. . . . . . . .  D ADDR   00D8H   A   
ADCON1. . . . . . . .  D ADDR   00DCH   A   
ADDATH. . . . . . . .  D ADDR   00D9H   A   
ADDATL. . . . . . . .  D ADDR   00DAH   A   
ADEX. . . . . . . . .  B ADDR   00D8H.5 A   
ADM . . . . . . . . .  B ADDR   00D8H.3 A   
ARCON . . . . . . . .  D ADDR   00EFH   A   
B . . . . . . . . . .  D ADDR   00F0H   A   
BD. . . . . . . . . .  B ADDR   00D8H.7 A   
BEFORERESTORESTACK. .  C ADDR   00C1H   R   SEG=SCHEDULERSEGMENT
BSY . . . . . . . . .  B ADDR   00D8H.4 A   
CC4EN . . . . . . . .  D ADDR   00C9H   A   
CCEN. . . . . . . . .  D ADDR   00C1H   A   
CCH1. . . . . . . . .  D ADDR   00C3H   A   
CCH2. . . . . . . . .  D ADDR   00C5H   A   
CCH3. . . . . . . . .  D ADDR   00C7H   A   
CCH4. . . . . . . . .  D ADDR   00CFH   A   
CCL1. . . . . . . . .  D ADDR   00C2H   A   
CCL2. . . . . . . . .  D ADDR   00C4H   A   
CCL3. . . . . . . . .  D ADDR   00C6H   A   
CCL4. . . . . . . . .  D ADDR   00CEH   A   
CLK . . . . . . . . .  B ADDR   00D8H.6 A   
CLRMSK. . . . . . . .  D ADDR   00A6H   A   
CMEN. . . . . . . . .  D ADDR   00F6H   A   
CMH0. . . . . . . . .  D ADDR   00D3H   A   
CMH1. . . . . . . . .  D ADDR   00D5H   A   
CMH2. . . . . . . . .  D ADDR   00D7H   A   
CMH3. . . . . . . . .  D ADDR   00E3H   A   
CMH4. . . . . . . . .  D ADDR   00E5H   A   
CMH5. . . . . . . . .  D ADDR   00E7H   A   
CMH6. . . . . . . . .  D ADDR   00F3H   A   
CMH7. . . . . . . . .  D ADDR   00F5H   A   
CML0. . . . . . . . .  D ADDR   00D2H   A   
CML1. . . . . . . . .  D ADDR   00D4H   A   
CML2. . . . . . . . .  D ADDR   00D6H   A   
CML3. . . . . . . . .  D ADDR   00E2H   A   
CML4. . . . . . . . .  D ADDR   00E4H   A   
CML5. . . . . . . . .  D ADDR   00E6H   A   
CML6. . . . . . . . .  D ADDR   00F2H   A   
CML7. . . . . . . . .  D ADDR   00F4H   A   
CMSEL . . . . . . . .  D ADDR   00F7H   A   
COMCLRH . . . . . . .  D ADDR   00A4H   A   
COMCLRL . . . . . . .  D ADDR   00A3H   A   
COMSETH . . . . . . .  D ADDR   00A2H   A   
COMSETL . . . . . . .  D ADDR   00A1H   A   
CONSOLEPROCESS. . . .  C ADDR   -----       EXT
CRCH. . . . . . . . .  D ADDR   00CBH   A   
CRCL. . . . . . . . .  D ADDR   00CAH   A   
CTCON . . . . . . . .  D ADDR   00E1H   A   
CTRELH. . . . . . . .  D ADDR   00DFH   A   
CTRELL. . . . . . . .  D ADDR   00DEH   A   
CY. . . . . . . . . .  B ADDR   00D0H.7 A   
DPH . . . . . . . . .  D ADDR   0083H   A   
DPL . . . . . . . . .  D ADDR   0082H   A   
DPSEL . . . . . . . .  D ADDR   0092H   A   
EADC. . . . . . . . .  B ADDR   00B8H.0 A   
EAL . . . . . . . . .  B ADDR   00A8H.7 A   
ENDLOOP . . . . . . .  C ADDR   00E8H   R   SEG=SCHEDULERSEGMENT
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 12:39:12 PAGE     7

ES. . . . . . . . . .  B ADDR   00A8H.4 A   
ET0 . . . . . . . . .  B ADDR   00A8H.1 A   
ET1 . . . . . . . . .  B ADDR   00A8H.3 A   
ET2 . . . . . . . . .  B ADDR   00A8H.5 A   
EX0 . . . . . . . . .  B ADDR   00A8H.0 A   
EX1 . . . . . . . . .  B ADDR   00A8H.2 A   
EX2 . . . . . . . . .  B ADDR   00B8H.1 A   
EX3 . . . . . . . . .  B ADDR   00B8H.2 A   
EX4 . . . . . . . . .  B ADDR   00B8H.3 A   
EX5 . . . . . . . . .  B ADDR   00B8H.4 A   
EX6 . . . . . . . . .  B ADDR   00B8H.5 A   
EXEN2 . . . . . . . .  B ADDR   00B8H.7 A   
EXF2. . . . . . . . .  B ADDR   00C0H.7 A   
F0. . . . . . . . . .  B ADDR   00D0H.5 A   
F1. . . . . . . . . .  B ADDR   00D0H.1 A   
FINDNEXTPROCESS . . .  C ADDR   006EH   R   SEG=SCHEDULERSEGMENT
FINDNEXTPROG. . . . .  C ADDR   00E7H   R   SEG=SCHEDULERSEGMENT
I2FR. . . . . . . . .  B ADDR   00C8H.5 A   
I3FR. . . . . . . . .  B ADDR   00C8H.6 A   
IADC. . . . . . . . .  B ADDR   00C0H.0 A   
IE0 . . . . . . . . .  B ADDR   0088H.1 A   
IE1 . . . . . . . . .  B ADDR   0088H.3 A   
IEN0. . . . . . . . .  D ADDR   00A8H   A   
IEN1. . . . . . . . .  D ADDR   00B8H   A   
IEN2. . . . . . . . .  D ADDR   009AH   A   
IEX2. . . . . . . . .  B ADDR   00C0H.1 A   
IEX3. . . . . . . . .  B ADDR   00C0H.2 A   
IEX4. . . . . . . . .  B ADDR   00C0H.3 A   
IEX5. . . . . . . . .  B ADDR   00C0H.4 A   
IEX6. . . . . . . . .  B ADDR   00C0H.5 A   
INT0. . . . . . . . .  B ADDR   00B0H.2 A   
INT1. . . . . . . . .  B ADDR   00B0H.3 A   
IP0 . . . . . . . . .  D ADDR   00A9H   A   
IP1 . . . . . . . . .  D ADDR   00B9H   A   
IRCON . . . . . . . .  D ADDR   00C0H   A   
IRCON1. . . . . . . .  D ADDR   00D1H   A   
IT0 . . . . . . . . .  B ADDR   0088H.0 A   
IT1 . . . . . . . . .  B ADDR   0088H.2 A   
JUSTSKIPTHELINEBEFORE  C ADDR   0075H   R   SEG=SCHEDULERSEGMENT
MD0 . . . . . . . . .  D ADDR   00E9H   A   
MD1 . . . . . . . . .  D ADDR   00EAH   A   
MD2 . . . . . . . . .  D ADDR   00EBH   A   
MD3 . . . . . . . . .  D ADDR   00ECH   A   
MD4 . . . . . . . . .  D ADDR   00EDH   A   
MD5 . . . . . . . . .  D ADDR   00EEH   A   
MX0 . . . . . . . . .  B ADDR   00D8H.0 A   
MX1 . . . . . . . . .  B ADDR   00D8H.1 A   
MX2 . . . . . . . . .  B ADDR   00D8H.2 A   
OV. . . . . . . . . .  B ADDR   00D0H.2 A   
P . . . . . . . . . .  B ADDR   00D0H.0 A   
P0. . . . . . . . . .  D ADDR   0080H   A   
P1. . . . . . . . . .  D ADDR   0090H   A   
P2. . . . . . . . . .  D ADDR   00A0H   A   
P3. . . . . . . . . .  D ADDR   00B0H   A   
P4. . . . . . . . . .  D ADDR   00E8H   A   
P5. . . . . . . . . .  D ADDR   00F8H   A   
P6. . . . . . . . . .  D ADDR   00FAH   A   
P7. . . . . . . . . .  D ADDR   00DBH   A   
P8. . . . . . . . . .  D ADDR   00DDH   A   
PCON. . . . . . . . .  D ADDR   0087H   A   
PSW . . . . . . . . .  D ADDR   00D0H   A   
RB80. . . . . . . . .  B ADDR   0098H.2 A   
RD. . . . . . . . . .  B ADDR   00B0H.7 A   
REALEND . . . . . . .  C ADDR   00EFH   R   SEG=SCHEDULERSEGMENT
REN0. . . . . . . . .  B ADDR   0098H.4 A   
RESTORESTACK. . . . .  C ADDR   00C7H   R   SEG=SCHEDULERSEGMENT
A51 MACRO ASSEMBLER  SCHEDULER                                                            11/11/2018 12:39:12 PAGE     8

RESTORESTACKCOMPLETE.  C ADDR   00CFH   R   SEG=SCHEDULERSEGMENT
RI0 . . . . . . . . .  B ADDR   0098H.0 A   
RS0 . . . . . . . . .  B ADDR   00D0H.3 A   
RS1 . . . . . . . . .  B ADDR   00D0H.4 A   
RXD . . . . . . . . .  B ADDR   00B0H.0 A   
S0BUF . . . . . . . .  D ADDR   0099H   A   
S0CON . . . . . . . .  D ADDR   0098H   A   
S0RELH. . . . . . . .  D ADDR   00BAH   A   
S0RELL. . . . . . . .  D ADDR   00AAH   A   
S1BUF . . . . . . . .  D ADDR   009CH   A   
S1CON . . . . . . . .  D ADDR   009BH   A   
S1RELH. . . . . . . .  D ADDR   00BBH   A   
S1RELL. . . . . . . .  D ADDR   009DH   A   
SAVESTACK . . . . . .  C ADDR   0066H   R   SEG=SCHEDULERSEGMENT
SCHEDULER . . . . . .  C ADDR   0000H   R   SEG=SCHEDULERSEGMENT
SCHEDULERSEGMENT. . .  C SEG    00EFH       REL=UNIT
SETMSK. . . . . . . .  D ADDR   00A5H   A   
SM0 . . . . . . . . .  B ADDR   0098H.7 A   
SM1 . . . . . . . . .  B ADDR   0098H.6 A   
SM20. . . . . . . . .  B ADDR   0098H.5 A   
SP. . . . . . . . . .  D ADDR   0081H   A   
STATUSNOTRUNNING. . .  N NUMB   0000H   A   
STATUSRUNNING . . . .  N NUMB   0002H   A   
STATUSSTARTREQ. . . .  N NUMB   0001H   A   
SWDT. . . . . . . . .  B ADDR   00B8H.6 A   
SYSCON. . . . . . . .  D ADDR   00B1H   A   
T0. . . . . . . . . .  B ADDR   00B0H.4 A   
T1. . . . . . . . . .  B ADDR   00B0H.5 A   
T2CM. . . . . . . . .  B ADDR   00C8H.2 A   
T2CON . . . . . . . .  D ADDR   00C8H   A   
T2I0. . . . . . . . .  B ADDR   00C8H.0 A   
T2I1. . . . . . . . .  B ADDR   00C8H.1 A   
T2PS. . . . . . . . .  B ADDR   00C8H.7 A   
T2R0. . . . . . . . .  B ADDR   00C8H.3 A   
T2R1. . . . . . . . .  B ADDR   00C8H.4 A   
TB80. . . . . . . . .  B ADDR   0098H.3 A   
TCON. . . . . . . . .  D ADDR   0088H   A   
TF0 . . . . . . . . .  B ADDR   0088H.5 A   
TF1 . . . . . . . . .  B ADDR   0088H.7 A   
TF2 . . . . . . . . .  B ADDR   00C0H.6 A   
TH0 . . . . . . . . .  D ADDR   008CH   A   
TH1 . . . . . . . . .  D ADDR   008DH   A   
TH2 . . . . . . . . .  D ADDR   00CDH   A   
TI0 . . . . . . . . .  B ADDR   0098H.1 A   
TIHANDLER . . . . . .  C ADDR   001BH   R   SEG=SCHEDULERSEGMENT
TL0 . . . . . . . . .  D ADDR   008AH   A   
TL1 . . . . . . . . .  D ADDR   008BH   A   
TL2 . . . . . . . . .  D ADDR   00CCH   A   
TMOD. . . . . . . . .  D ADDR   0089H   A   
TR0 . . . . . . . . .  B ADDR   0088H.4 A   
TR1 . . . . . . . . .  B ADDR   0088H.6 A   
TXD . . . . . . . . .  B ADDR   00B0H.1 A   
WDT . . . . . . . . .  B ADDR   00A8H.6 A   
WDTH. . . . . . . . .  D ADDR   0085H   A   
WDTL. . . . . . . . .  D ADDR   0084H   A   
WDTREL. . . . . . . .  D ADDR   0086H   A   
WR. . . . . . . . . .  B ADDR   00B0H.6 A   
XPAGE . . . . . . . .  D ADDR   0091H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
